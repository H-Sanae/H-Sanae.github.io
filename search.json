[{"title":"Hello World","url":"/2025/06/07/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"GitHub+Hexo博客创建","url":"/2025/06/07/myblog/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/","content":"参考教程从0开始到部署到github\nhuahuipj.github.io\nhexo史上最全搭建教程\n\n基本步骤1. 安装git2. 安装nodejs3. 安装hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹Blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。\n输入命令安装：\nnpm install -g hexo-cli\n\n查看版本命令：hexo -v\n初始化hexo\nhexo init myblog\n这个myblog可以自己取什么名字都行，会在当前文件夹（Blog）目录下创建一个myblog文件夹\ncd myblog #进入这个myblog文件夹npm install\n新建完成后，指定文件夹目录下有：\n\nnode_modules: 依赖包\npublic：存放生成的页面\nscaffolds：生成文章的一些模板\nsource：用来存放你的文章\nthemes：主题\n_config.yml: 博客的配置文件\n\n打开hexo的服务，在浏览器输入 localhost:4000 就可以看到你生成的博客了\nhexo ghexo server\n使用ctrl+c可以把服务关掉\n4. GitHub创建个人仓库创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名\n5. 生成SSH添加到GitHub回到你的git bash中\ngit config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;\n这里的 yourname 输入你的GitHub用户名，youremail 输入你GitHub的邮箱（双引号保留）\n然后创建SSH，一路回车(应该有3次回车)\nssh-keygen -t rsa -C &quot;youremail&quot;\n终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key将刚复制的内容粘贴到key那里，title随便填，保存\n测试是否成功\n$ ssh -T git@github.com # 注意邮箱地址不用改\n如果提示Are you sure you want to continue connecting (yes&#x2F;no)? 输入yes，然后会看到：Hi H-Sanae! You’ve successfully authenticated, but GitHub does not provide shell access.看到这个信息说明SSH已配置成功！\n6. 将hexo部署到GitHub打开站点配置文件 _config.yml，翻到最后，修改为:(YourgithubName就是你的GitHub账户)\ndeploy:  type: git  repo: https://github.com/YourgithubName/YourgithubName.github.io.git  branch: master\nbranch 填你刚刚创建GitHub仓库的默认分支名称，看下是master还是main，不要填错了，还要注意一下，冒号后面加一个空格\n这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub\nnpm install hexo-deployer-git --save\n然后\nhexo cleanhexo ghexo d\n\n到此完成，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了！\n注意因为从hexo提交代码时会把你以前的所有代码都删掉，在上传代码到github之前，要记得先把以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的）。\n相关命令http://localhost:4000\nhexo clean   #清除缓存文件 db.json 和已生成的静态文件 publichexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n\n常用命令\nhexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本\n\n缩写\nhexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy\n\n组合命令\nhexo s -g #生成并本地预览hexo d -g #生成并上传\n\n主题设置diaspora主题\n根目录全局配置文件_config.yml1、所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。2、language是设置语言。zh-Hans是中文。3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8，方法很多。\n写博客定位到我们的hexo根目录，执行命令：\nhexo new &#x27;my-first-blog&#x27;\nhexo会帮我们在_posts下生成相关md文件我们只需要打开这个文件就可以开始写博客了当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间一般完整格式如下：\n---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文","categories":["笔记"],"tags":["博客","hexo","github"]},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.16%E6%80%BB%E7%BB%93%EF%BC%9ALiunx%E5%9F%BA%E7%A1%80/","content":"查看ip命令：ifconfigIP: 192.168.48.129![[Pasted image 20250516101428.png]]\n常用命令cd 切换目录cd ~ 回到自己的家目录，一般直接用 cd 即可cd ../ 回到当前目录的上一级目录cd / 回到根目录从根目录算起的路径叫做绝对路径，以斜线开头cd /home/test/从当前目录算起的路径叫做相对路径，当前工作目录的相对位置cd test （当前位置有test文件夹时可用）pwd 显示现在所在的目录位置\n\nls 查看内容ls -a 显示全部包括隐藏文件(隐藏文件以.开头)ll 等于 ls -l 显示长格式属性，常用ls -r 反向排序 ls -S 按照占磁盘大小从大到小排序 ls -t 以时间排序（由新到旧） ls /home/test 指定路径查看\n-a -l -r 这类属于参数，可同时在一个 - 中设置，不分顺序\n按磁盘大小从大到小反向排序（即从小到大），长格式显示所有文件ls -rlaS /home/test\nmkdir 创建目录mkdir a 创建一个目录 mkdir b c 同时创建多个目录 mkdir -p d/e 创建多级目录(创建一个目录d，里面有个目录e)\n蓝色 代表目录白色 代表文件\ntouch 创建空文件touch name.txt touch /root/test/name.txt  #文件名可带路径touch &#123;1..5&#125;.txt  #批量创建5个文件touch student&#123;1..10&#125;.txt  #文件名分别为student1.txt；student2.txt；student3.txt...student100.txt\n通配符：配合文件名及目录使用？匹配一个字符 ?.txt* 匹配全部字符 *.txt{1..10} 1到10{a..z} a b c …z{A..Z} A B C …..Z\nrm 删除文件或目录rm 一般都带 -f 强制删除删文件夹必带 -r 将指定目录下的所有文件与子目录一并处理\nrm t.txt 删除文件，会提示是否删除，输入y执行删除，n不删除 rm -r a 删除a目录（文件夹）及其里面的文件及子目录 rm -rf * 强制删除文件夹下面的子目录和文件 rm -rf q*强制删除以q开头的文件夹及下面的子目录和文件\n\nmv 移动文件或目录并命名mv移动时可设置文件名，不填写路径只写文件名相当于不移动只重命名\nmv a b #将文件a重命名为bmv a.txt b.txt #将a.txt重命名为b.txtmv a c/ #将文件a移动到c目录下mv b.txt ../c.txt #将b.txt移动到上一级目录并重命名为c.txt\n\ncp 拷贝文件到指定目录并命名cp -r 递归拷贝目录（复制包括所有子文件，必须使用） cp a.txt b/a.txt cp a.txt b/b.txt cp -r /root/a /root/b\n\nln 软连接类似win快捷方式浅蓝色删除带 -r\nln -s 目标位置 链接名称目标位置：要链接到的原始文件或目录的路径链接名称：要创建的软连接的名称和位置，不写路径默认在当前目录下创建ln -s /home/test/ wkln -s /home/test/ /home/wk删除软连接rm -rf wk\n软连接存放路径一般放在用户的家目录，放在其他地方会出问题\n快捷键Tab 命令补全；文件名或者路径补全；连续按2次Tab键，显示以已输入字符开头的所有命令、文件名或路径Ctrl + C 取消当前命令行的编辑；结束当前执行的命令上下键自动记录命令Ctrl+滚轮上下滚动可以放大缩小mobax右键快速粘贴，修改完重启mobox生效  （0516文件目录类.mp4_01:01:39）鼠标中键也可快速粘贴\nvim 编辑文件在命令行下执行：vim 文件名 进入一般模式在一般模式下输入 i 或 a 进入编辑模式\n编辑模式按 esc 退回一般模式在一般模式下输入 : 或 &#x2F; 进入命令模式\n命令模式下输入命令进行保存退出，有以下命令：:wq 保存退出； :q 不保存退出； :q! 强制不保存退出命令模式按 esc 退回一般模式![[Pasted image 20250516173158.png]]\n一般模式 命令dd 删除光标所在的行,且保存到剪贴板3dd 删除光标所在的三行,且保存到剪贴板yy复制光标所在的行4yy复制光标所在的连续4行p（小写） 将已复制的内容在光标的下一行粘贴P（大写）将已复制的内容在光标的上一行粘贴x,X：在一行字中，x 为向后删除一个字符（相当于[Del]键），X 为向前删除一个字符 （相当于[Backspace]）也可5x（向后删除5个字符）等G光标快速定位到最后一行 gg 光标快速定位到第一行u 撤销上一步操作\n命令模式 命令:wq 保存退出； :q 不保存退出； :q! 强制不保存退出:set nu 显示行号；  :set nonu 取消行号:5 光标快读定位到第5行:nohl 去除高亮显示\n查找字符：&#x2F;&#x2F;hello 查找字符串hello，按n向下搜索，按N向上搜索\n替换字符串替换字符串命令的基本语法是: [range]s&#x2F;⽬标字符串&#x2F;替换字符串&#x2F;[option]其中range和option字段都可以缺省不填，间隔符除了&#x2F;还可以是其他的range：表⽰搜索范围，默认表⽰当前⾏； 1,10表⽰从第1到第10⾏g 表示全局替换，有多少次替换多少次；无g 只替代每行第一个s 表示替换\n#把整个文件的nologin替换成888888 :1,$s/nologin/88888/g#把1到10行的nologin替换成888888:1,10s/nologin/88888/g\n\n\n锁死IP![[Pasted image 20250516164340.png]]\n快照类似于备份系统，以便还原系统虚拟机-快照-拍摄快照如果系统出问题可以还原到这个拍照的节点快照可以是关机也可以是开机，但建议关机拍快照![[Pasted image 20250516164905.png]]\n作业练习1.分别使用绝对路径和相对路径切换到home目录 cd /homecd ../home  #当前为~2.回到当前目录的上一级目录 cd ../3.回到家目录 cd4.在/home目录下创建两个目录 class a mkdir /home/class a  #这个写法会在home下创一个class，在/下创一个amkdir /home/class /home/a5.创建目录 /home/class/studentsmkdir /home/class/students6.删除一个目录 /home/a rm -rf /home/a7.在目录 /home/class/students 下创建个文件 name.txt touch /home/class/students/name.txt8.将 /home/class/students/name.txt 复制到 /home/class 目录 cp /home/class/students/name.txt /home/class9.创建/home/class/teachers文件夹，复制整个目录 /home/class/students 到 /home/class/teachers/文件夹下 mkdir /home/class/teacherscp -r /home/class/students /home/class/teachers/10.删除 /home/class/name.txtrm -f /home/class/name.txt 11.删除文件夹及里面的文件 /home/class/teachers rm -rf /home/class/teachers 12./home目录下创建一个文件name.txt,重命名 /home/name.txt 文件为 age.txt touch /home/name.txtmv /home/name.txt /home/age.txt13.将 /home/age.txt 拷贝到 /root/ 目录下 cp /home/age.txt /root/14.在/root下创建一个软连接wk，指向/etc/sysconfig/network-scripts/ifcfg-ens33，然后 使用ll查看这个软连接ln -s /etc/sysconfig/network-scripts/ifcfg-ens33 /root/wk15.删除上题中建立的软连接 rm -rf wk16.在/root下递归创建目录xxx/yyy/zzz mkdir -p xxx/yyy/zzz17.使用touch命令在zzz目录中批量创建文件：test1.log...test10.log，a.txt...z.txt， a1.txt...a10.txt b1.txt..b10.txt ... z1.txt...z10.txt cd xxx/yyy/zzztouch test&#123;1..10&#125;.log &#123;a..z&#125;.txt &#123;a..z&#125;&#123;1..10&#125;.txt18.删除zzz中所有名字是单个字母后缀是txt的文件 rm -f ?.txt19.将zzz中所有test开头的文件复制到上级目录yyy中cp test* ../\n\n上机练习3\n1.将/etc/man_db.conf复制到家目录/root下; cp /etc/man_db.conf /root/2.使用vim开启家目录下的man_db.conf在vim中设定一下行号; vim man_db.conf:set num3.定位到第68行 :684.移动到第一行，并且向下搜寻一下SECTION这个字符串，请问他在第几行? #102行:1/SECTION5.接下来，我要将50到100行之间的小写[man]字符串改为大写[MAN]字符串 :50,100s/man/MAN/g6.修改完之后，突然反悔了，要全部复原，有哪些方法? u  #撤销上一步操作:q!  #强制不保存退出7.我要复制65到73这9行内容,并且贴到最后一行之后; :65,73y  #复制65到73这9行内容:$  #跳转到最后一行p  #粘贴到下一行:65,73t$  #组合命令，一行实现8.到第70行，并且向右删除5个字符 :705x9.在第一行新增一行，该行内容输入[I am a student…] :1  ##先定位到第一行i  #按i进入编辑模式再输入I am a student…10.找到原来猴子吃桃的题目，把代码拷贝到第50行之后 #直接粘贴（）11.到第30行，删除30到38行 :309dd12.取消行号，存储后离开吧！:set nonu:wq13.配置静态ip，vim /etc/sysconfig/network-scripts/ifcfg-ens33#见上图锁死IP\n\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.19%E6%80%BB%E7%BB%93%EF%BC%9ALiunx%E5%91%BD%E4%BB%A4/","content":"Linux命令（搜索查看查找类）find 从指定目录查找文件-name &lt;查询方式&gt; 按照指定的文件名查找模式查找文件-mtime n 查找n天以前被修改过的所有文件。-exec&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；-size &lt;文件大小&gt; 按照指定的文件大小查找文件\nfind /root -name &quot;*.pdf&quot; find /root -name &quot;*.pdf&quot; -a -size +1M find /root -mtime +7 #七天前被修改过的文件 find /root -name &quot;*.sql&quot; -exec ls -l &#123;&#125; \\; #查找文件并以ls -l形式显示 find /root -name &quot;*.pdf&quot; -exec rm -f &#123;&#125; \\;\n\n\nhead 与 tail 查看行头+ 尾-head -n +行数 文件名 （不加-n默认开头十行）tail -n -行数 文件名 （不加-n默认结尾十行） \nhead a.txt #默认显示开头十行tail a.txt #默认显示结尾十行 head -n +3 a.txt   #只显示前三行 tail -n -3 a.txt   #只显示后三行\n\ncat 查看内容cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。-n 显示行号包括空行-b 跳过空白行编号-s 将所有的连续的多个空行替换为一个空行（压缩成一个空行） \ncat 1.log 2.log cat -sb test.log\n\nmore查看大内容more 分屏查看文件（敲空格查看下一页）\ngrep 过滤查找以行为单位进行查找，显示结果为满足的行-c 统计满足的行数-v 反转不包含\ngrep &quot;p&quot; 1.txt #单文件搜索包含p的行 grep &quot;P&quot; 1.txt b.txt #多文件搜索 grep -v &quot;p&quot; 1.txt #单文件搜索不包含p的行 grep -c &quot;p&quot; 1.txt #统计出现多少行 grep &quot;^n&quot; 1.txt #显示以n开头的行grep &quot;n$&quot; 1.txt #显示以n结尾的行 \n\nhistory 查看已经执行过的历史命令history 5 #最近五个命令\n\nwc 统计文件wc -c name.txt #查看文件的字节数wc -l name.txt #查看文件的行数\n\ndu 查看空间du -h name.txt 人性化方式（带单位） du -s name.txt 只统计每个参数所占用空间总的大小 du -sh /root\n\n管道符号 | （配合命令使用）管道符 | 表示将前一个命令的处理结果输出传递给后面的命令处理\nhistory | grep -c &quot;ll&quot; #统计历史输入了几次ll命令\n\n&gt; 和 &gt;&gt; 指令&gt; 输出重定向(覆盖写),&gt;&gt; 追加（追加写）\nls -l | grep -c &quot;^d&quot; ls -l | grep &quot;^d&quot; | wc -l history | grep -c &quot;ls&quot; history | grep &quot;ls&quot; | grep &quot;s$&quot; &gt; ttt.txt cat a.txt b.txt &gt;&gt; ttt.txt cat a.txt b.txt | grep &quot;s&quot; &gt;&gt; ttt.txt\n\n\n解压安装类zip压缩 unzip解压常用选项：-r  递归压缩，即压缩目录-d&lt;目录&gt;  指定解压后文件的存放目录压缩用相对路径，解压可以用绝对路径\n# 压缩文件和目录 zip 文件名.zip 将要压缩的内容 zip test.zip -r a/b  #注：绝对路径压缩会带前面的路径文件夹# 解压缩文件 unzip 文件名.zipunzip linux.x64_11gR2_database_1of2.zip -d /opt/app/database/\n\ntar 压缩解压-z  调用 gzip 程序进行压缩或解压-c  创建（Create）.tar 格式的包文件-x  解开.tar 格式的包文件-c  &lt;&#x2F;解压时指定释放的目标文件夹 指定目录-v  输出详细信息（Verbose）-f  表示使用归档文件（一般都要带上表示使用tar，放在最后）\n压缩：tar [选项] ... 归档文件名（压缩包名字） 源文件或目录 #压缩选项一般用-zcvf解压：tar [选项] ... 归档文件名 [-C 目标目录]  #解压选项一般用-zxvftar -zcvf abc123.tar.gz abc.txt 123.txt  #将abc.txt和123.txt压缩成abc123.tar.gztar -zcvf abc123.tar.gz m tar -zxvf abc123.tar.gz -C /home/test/  #解压到指定目录\n\nYum包管理Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载 RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。\nyum list | grep xxx  #查询yum服务器是否有需要安装的软件yum info xxx  #查询指定的yum包信息yum install xxx  #安装指定的yum包yum remove xxx  #卸载指定的yum包 yum list installed  #查看已安装的软件包yum install ntpdate  # # 安装网络对时\n\n用户权限类登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可 以利用普通用户登录，登录后再用 su - 用户名 命令来切换\nsu - test  #切换到test用户su - root #切换到root用户（需要输入密码）\n\n用户及用户组类似于角色，系统可以对有共性的多个用户进行统一的管理 \n新增用户组 groupadd xiaoshou 添加用户 useradd xiaomei 添加用户时加上组 useradd -g xiaoshou xiaomei 指定/修改密码 passwd xiaomei 查询用户信息 id xiaomei 切换用户 su - xiaomei 查看当前用户 whoami 修改用户的组 usermod -g 用户组 用户名 删除用户 userdel xiaomei (exit退出后再删除) 删除组 groupdel xiaoshou\n用户和组的相关文件&#x2F;etc&#x2F;passwd 文件用户（user）的配置文件，记录用户的各种信息每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell\n&#x2F;etc&#x2F;group 文件组(group)的配置文件，记录Linux包含的组的信息每行含义：组名:口令:组标识号:组内用户列表\n权限详解[ r ]代表可读(read)[ w ]代表可写(write)[ x ]代表可执行(execute)\ndrwxr-xr-x.  2 root    root      6 5月  16 14:26 a-rw-rw-rw-.  1 wukong shenxian   0 5月  19 16:32 1.txt\n10个字符.第一个字符代表文件类型：文件（-） 目录（d） 链接（l）接下来每三个字符为一组，共三组，分别代表 文件拥有者、同组的其他用户、不同组的其他用户\n可用数字表示为：r&#x3D;4， w&#x3D;2， x&#x3D;1因此 rwx&#x3D;4+2+1&#x3D;7\nchmod 修改权限u 所有者  g 所有组  o 其他人  a 所有人(u、g、o的总和) \nchmod u=rwx,g=rx,o=x name.txtchmod o+w name.txt chmod a-x name.txtchmod +x name.txt #不写用户默认为所有人，效果同a+xchmod u=rwx,g=rx,o=x filechmod 751 file  #功能同上        　　 　   chmod -R u+r directory  #递归地给directory目录下所有文件和子目录的属主分配读的权限\n\nchown 修改文件所有者chown [-R] 所有者 文件或目录  #-R表示递归里面的所有文件及目录 chown test02 /root/test.txt chown -R 用户:组 /usr/local/mysql chown meimei:students 1.txt\n\n作业练习#上机练习4#1.将/etc/passwd文件拷贝到/root/目录下，并改名为ptestcp /etc/passwd /root/ptest#2.查看ptest的前八行数据 head -n +8 ptest#3.过滤查看ptest文件中包含root的行 grep &quot;root&quot; ptest#4.查看/home目录占用空间 du -sh /home#5./root中新建文件test.log，插入内容如下： @directory-client @gnome-apps @gnome-desktop touch /root/test.logvim test.logi &quot;@directory-client @gnome-apps @gnome-desktop &quot;#6.将test.log和ptest合并到/root目录下的test1.log cat test.log ptest &gt; /root/test1.log#7.将/root目录下的ptest加上行号输出到test2.logcat -n /root/ptest &gt; test2.log#8.查找并显示根目录下大于1M的png文件 find / -name &quot;*.png&quot; -a -size +1M#9.统计系统上使用ls命令的次数 history | grep -c &quot;ls&quot;#10.将/root/ptest中出现了root的行存储到test.txt文件 grep &quot;root&quot; /root/ptest &gt; test.txt#11.根据名称查找 /root 下的txt文件 find /root -name &quot;*.txt&quot;#12.查找整个linux系统下大于20M的文件 (+n 大于 -n小于 n等于) find / -size +20M#13.查找/root/xxx/yyy/zzz下所有.txt文件并把他们删掉 find /root/xxx/yyy/zzz -name &quot;*.txt&quot; -exec rm -f &#123;&#125; \\;#14.统计ptest文件的字节数 wc -c ptestcat ptest | wc -c  #只显示数字#15.统计ptest文件以s开头的行的数量grep -c &quot;^s&quot; ptest#上机练习5#1.将 /root/xxx 压缩成 a.tar.gz tar -zcvf a.tar.gz /root/xxx #2.将 a.tar.gz 解压到/root/ceshi/ mkdir ceshitar -zxvf a.tar.gz -C /root/ceshi/#3.增加用户组 students groupadd students#4.添加新用户kunkun及meimei并直接加到students组 useradd -g students kunkunuseradd -g students meimei#5.指定kunkun密码, 然后切换到这个用户 passwd kunkunkunkun123su - kunkun#6.到该用户的家目录新建一个student.txt cdtouch student.txt#7.查询并写入该用户的用户信息到student.txt, 退出exit id kunkun &gt; student.txtexit#8.使用root账号新建文件1.txt及2.txt 对文件/root/1.txt 为所有用户分配读写执行权限 touch 1.txt 2.txtchmod 777 /root/1.txt#9.对文件/root/2.txt 设置权限为rwxr-xr--chmod 754 /root/2.txt#10.对文件/root/2.txt 设置属组权限增加写的权限 chmod g+w /root/2.txt#11.给/root/1.txt文件修改kunkun用户及students用户组权限 chown kunkun:students /root/1.txt#12./root/下创建文件夹open，里面批量创建文件open1.log...open100.log mkdir opentouch /root/open/open&#123;1..100&#125;.log#13.对文件夹open设置为meimei用户及students用户组权限 chown -R meimei:students open#14.对文件夹open设置权限为rwxr-xr-x chmod -R 755 open#15.查看/etc/group及/etc/passwd文件内容重定向到/root/open.txt中 cat /etc/group /etc/passwd &gt; /root/open.txt#16.删除用户kunkun和meimei，查看/etc/passwd的后3行数据追加到/root/open.txt中 userdel kunkunuserdel meimeitail -n -3 /etc/passwd &gt;&gt; /root/open.txt#17.删除用户组，查看/etc/group的后3行数据追加到/root/open.txt中 groupdel studentstail -n -3 /etc/group &gt;&gt; /root/open.txt#18.删除home下两个用户的文件夹及里面的内容rm -rf /home/kunkun /home/meimei#19.神仙妖怪大战，使用拼音来化名，例如：shaseng为沙僧 #建立两个组 (神仙, 妖怪)，建立用户 (悟空, 八戒, 沙僧)，把悟空和八戒放入妖怪，沙僧放入神仙 groupadd shenxiangroupadd yaoguaiuseradd -g yaoguai wukonguseradd -g yaoguai bajieuseradd -g shenxian shaseng#设置三个用户的密码 passwd wukongwukong123passwd bajiebajie123passwd shasengshaseng123#用悟空在自己的家目录下建立一个文件 monkey.txt，该文件要输出 i am a monkey su - wukongtouch monkey.txtvim monkey.txti #i am a monkeyesc :wq#用root账号给八戒一个对悟空文件夹及内容可以rwx的权限 su - rootchmod -R g=rwx /home/wukong#八戒修改 monkey.txt 加入一句话( i am a pig ) su - bajievim /home/wukong/monkey.txti #i am a pigesc :wq#测试一下沙僧对该文件有没有权限访问 su - shasengvim /home/wukong/monkey.txt #显示权限不足:q#把沙僧放入妖怪组 su - rootusermod -g yaoguai shaseng#让沙僧修改该文件 monkey.txt，加入一句话 (&quot;我是沙僧，我是妖怪!&quot;)su - shasengvim /home/wukong/monkey.txti #我是沙僧，我是妖怪!esc :wq\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.20%E6%80%BB%E7%BB%93%EF%BC%9A%E5%AE%89%E8%A3%85MySQL%E5%92%8COracle/","content":"Linux网络配置类clear  #清屏ifconfig  #列出网卡信息ping ip地址  #看网络是不是连通free  #查看内存使用情况\n\ntop 查看系统整体资源PID：进程的标识符。 USER：运行进程的用户名。 PR（优先级）：进程的优先级。 NI（Nice值）：进程的优先级调整值。 VIRT（虚拟内存）：进程使用的虚拟内存大小。 RES（常驻内存）：进程实际使用的物理内存大小。 SHR（共享内存）：进程共享的内存大小。 %CPU：进程占用 CPU 的使用率。 %MEM：进程占用内存的使用率。 TIME+：进程的累计 CPU 时间。\n\nps 显示系统执行的进程ps -aux  #查看所有用户所有进程 ps -ef  #查看子父进程之间的关系（常用）ps -ef | grep &quot;mysql&quot; #查看mysql服务ps -ef | grep &quot;oracle&quot; #查看oracle服务\npstree 查看进程树pstree 1660  #树状的形式显示进程的pid\nkill最常用的信号是：1 (HUP)：重新加载进程。9 (KILL)：强制杀死一个进程。15 (TERM)：正常停止一个进程。kill -9 16989 杀死进程\nsystemctl 服务管理systemctl [ start | stop | restart | status] 服务名service 服务名 [ start | stop | restart | status]服务名：mysql network firewalld等systemctl是新版本写法，service是老版本写法防火墙操作：status&#x2F;start&#x2F;stop&#x2F;restart&#x2F;disable&#x2F;enable 多两个查看防火墙： systemctl status firewalld停止防火墙： systemctl disable firewalld 重启后生效注：直接关死即可，单机版使用防火墙\nnetstat 端口（port）netstat -nltp #查看网络端口\nmysql 端口默认 3306oracle 端口默认 1521centos7 端口默认 22nginx 端口默认 80达梦 端口默认5236\n启动服务su - oraclesqlplus / as sysdba SQL&gt; startup; SQL&gt; quit;lsnrctl start\n\n解锁scottsu - oraclesqlplus / as sysdba SQL&gt; alter user scott identified by oracle123456; SQL&gt; alter user scott account unlock; SQL&gt; quit;\n\nifconfig没有东西：网卡丢失出现这种报错一般是和 NetworkManager 服务冲突导致的，直接关闭 NetworkManger 服务就好了。1.关闭NetworkManager ：service NetworkManager stop2.禁止开机启动 ：systemctl disable NetworkManager3.重启网络： service network restart4.查看网络状态：systemctl status network或者登录虚拟机，点击电源按钮选择有线连接即可\n文件夹&#x2F;usr&#x2F;local&#x2F;  一般放小软件的安装&#x2F;opt&#x2F;app&#x2F;  一般放大软件的安装\nDBeaver连接MySQL![[Pasted image 20250520142144.png]]\nDBeaver连接Oracle![[Pasted image 20250520185323.png]]\n开机自启修改![[Pasted image 20250520182457.png]]![[Pasted image 20250520182309.png]]![[Pasted image 20250520183613.png]]\n开机自启验证![[Pasted image 20250520183234.png]]![[Pasted image 20250520183432.png]]\n快照![[Pasted image 20250520184543.png]]\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.19%E6%80%BB%E7%BB%93%EF%BC%9Agit%E7%9B%B8%E5%85%B3/","content":"基本命令右键–git bash here–命令窗口（一般在对应工作区右键打开） \n仓库区和工作区.git文件夹为仓库区：类似于一个数据存储着每一次提交的变化.git所在目录称为工作区，我们在这里创建项目和其他文件 \ngit init：创建本地仓库 git add 文件名  #把文件添加到暂存区，暂存区存储将要被提交的文件变化commit -m “说明文本”  #提交暂存区存储变化并生成一个新的版本git status  #查看命令状态git log  #查看日志\n\nGit服务器和远程仓库github.com 全球最大开源项目托管平台 https://github.com/Gitee.com 国内知名开源项目托管平台 码云 https://gitee.com\ngitee码云截图![[Pasted image 20250519204527.png]]![[Pasted image 20250519204501.png]]![[Pasted image 20250519204607.png]]\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.21%E6%80%BB%E7%BB%93%EF%BC%9A%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E3%80%81%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98%E3%80%81python%E3%80%81nginx%E5%AE%89%E8%A3%85/","content":"echo 输出字符换行打印输入字符 解释-n 不换行显示-e 出现转义字符进行解释处理转义字符\\n 换行 \necho &quot;hello world&quot; echo -n &quot;hello&quot;  #不换行显示echo -e &quot;你好\\n坤坤&quot;  #换行显示echo &quot;test&quot; &gt; t.txt\n\ndate 显示日期date (显示当前时间) date +&quot;%Y&quot;  #显示当前年份, +号紧贴，没有空格date +&quot;%Y-%m-%d %H:%M:%S&quot;  #自定格式显示date +&quot;%Y年%m月%d日 %H时%M分%S秒&quot;\n\ndate -d 日期解析用于字符转日期\ndate -d &quot;2009-12-12&quot; date -d &quot;2009-12-12 + 1 day&quot; date -d &quot;+1 day&quot; date -d &quot;+1 month&quot; date -d &quot;+1 year&quot; date -d &quot;2009-12-12 + 1 day&quot; +&quot;%Y/%m/%d %H:%M:%S&quot; &gt; time.txtdate -s &quot;2023-08-08 12:34:56&quot; #设置系统当前时间\n\nlinux网络对时#安装netdate yum install ntpdate #执行命令，同步时间。 ntpdate us.pool.ntp.org\n\ncal 查看日历cal 日 月 年 \ncal  #显示当前日历 cal 2023  #显示2023年日历 cal 01 2023  #显示2023年1月日历 cal 15 01 2023  #显示2023年1月15日日历\nwget命令用来从指定的URL下载文件。python下载地址：https://www.python.org/ftp/python\nwget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz\nseq命令用于产生从某个数到另外一个数之间的所有整数seq [选项]… 首数 增量 尾数\nseq 1 10  #正序输出，默认递增1seq 1 2 100  #递增2 #2,4,6...100seq 100 -1 1  #倒序输出\n\nLinux定时执行计划方式一：修改配置文件：&#x2F;etc&#x2F;crontab （要指明执行用户）分 时 日 月 周 用户名 执行的命令 \nvim /etc/crontab 5 * * * * root date &gt; /root/time.txt date +&quot;\\%Y&quot; &gt; /root/time.txt #定时任务中的特殊符号需要转义%\n\n方式二：通过crontab命令（不需要指明执行用户，默认就是当前用户） \ncrontab -e  # 编辑用户的cron配置文件； crontab -l  #查看用户的计划任务； crontab -r  #删除用户的计划任务； 5 * * * * date &gt; /root/time.txt\n\n特殊符号说明*  任何时间。比如 第一个 * 表示一小时中每分钟都执行一次的意思,   不连续的时间。比如 0 8,12,16 * * * 表示在每天的8点0分，12点0分，16点0分都执行一次命令-   连续的时间范围。比如 0 5 * * 1-6 表示在周一到六凌晨5点0分执行命令*&#x2F;n   每隔多久执行一次。比如 *&#x2F;10 * * * * 表示每隔10分钟就执行一遍命令\nlinux添加硬盘分区挂载fdiskfdisk -l  #可以查看系统所有硬盘的分区情况 fdisk /dev/sdb1  #可以分区\ndf用于显示 Linux 系统中各文件系统的硬盘使用情况，包括文件系统所在硬盘分区的总容量、已使用的容量、剩余容量等。 \ndf -h  #查看磁盘使用及挂载情况\nlinux添加硬盘分区挂载1.关闭虚拟机添加硬盘：虚拟机-设置-添加-硬盘-1G-单个文件存储-打开虚拟机进入目录&#x2F;dev，查看出现文件sdbdf -h 列出磁盘使用情况，目前没有新加的硬盘fdisk -l 发现存在待分区的磁盘 \n2.分区：fdisk &#x2F;dev&#x2F;sdb 依次输入m n p 1 空 空 wcd &#x2F;dev 看到sdb1文件出现 \n3.创建文件格式：mkfs.ext4 &#x2F;dev&#x2F;sdb1 \n4.挂载：先创建目录，mkdir -p &#x2F;mnt&#x2F;pan1vim &#x2F;etc&#x2F;fstab添加&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;pan1 ext4 defaults 0 0重启虚拟机df -h 查看挂载情况df -hl &#x2F;mnt&#x2F;pan1 查看目录空间\npython安装![[Pasted image 20250521151924.png]]\nnginx安装![[Pasted image 20250521160817.png]]![[Pasted image 20250521160938.png]]\nvscode连接linux编写python![[Pasted image 20250521171257.png]]\n作业练习#1.把当前时间显示为字符串格式，例如：2023年08月08日 12时30分25秒 date +&quot;%Y年%m月%d日 %H时%M分%S秒&quot;#2.把字符串20880909转换为时间类型显示 date -d &quot;20880909&quot;#3.设置当前系统时间为你的生日 date -s &quot;1999-10-13&quot;#4.把系统时间更新为网络时间 ntpdate us.pool.ntp.org#5.显示2008年的日历信息 cal 2008#6.显示你的出生年月日的日历信息cal 13 10 1999#7.输出一个直角三角形echo -e &quot;*\\n***\\n*****\\n*******\\n*********&quot;#8.生成一个序列8 18 28 ...... 98 seq 8 10 98#9.生成一个序列99 96 93 ...... 6 3 seq 99 -3 3#10.用第一种方式设置定时任务，每2分钟把当前系统时间追加到文件/root/time.txt中(格式：2023-06-12 10:39:20) vim /etc/crontabi*/2 * * * * root date +&quot;\\%Y-\\%m-\\%d \\%H:\\%M:\\%S&quot; &gt;&gt; /root/time.txtesc :wq#11.用第二种方式设置定时任务，每一分钟将/etc/passwd拷贝到/root下 crontab -ei* * * * * cp /etc/passwd /root/esc :wq#12.删除上面的两个定时任务vim /etc/crontabi#esc :wqcrontab -r\n添加一块2G的硬盘，分区并挂载到&#x2F;mnt&#x2F;ceshi目录下：关闭虚拟机-&gt;虚拟机-设置-添加-硬盘-2G-单个文件存储-打开虚拟机\n进入目录&#x2F;dev，查看出现文件sdb![[Pasted image 20250521113430.png]]\ndf -h 列出磁盘使用情况，目前没有新加的硬盘![[Pasted image 20250521113720.png]]\nfdisk -l 发现存在待分区的磁盘![[Pasted image 20250521113840.png]]\n分区：fdisk &#x2F;dev&#x2F;sdb 依次输入m n p 1 空 空 w![[Pasted image 20250521114030.png]]\ncd &#x2F;dev 看到sdb1文件出现![[Pasted image 20250521114153.png]]\n创建文件格式：mkfs.ext4 &#x2F;dev&#x2F;sdb1![[Pasted image 20250521114247.png]]\n挂载：先创建目录mkdir -p &#x2F;mnt&#x2F;pan1vim &#x2F;etc&#x2F;fstab添加&#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;pan1 ext4 defaults 0 0![[Pasted image 20250521114513.png]]\n重启虚拟机df -h 查看挂载情况![[Pasted image 20250521114912.png]]\ndf -hl &#x2F;mnt&#x2F;pan1 查看目录空间![[Pasted image 20250521114942.png]]添加硬盘成功\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.22%E6%80%BB%E7%BB%93%EF%BC%9Ashell%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/","content":"shell变量系统变量$HOME :当前登录用户的 “家目录” 路径$USER：当前用户名$RANDOM 可以随机生成 0~32767之间的整数数字\necho $HOME #相当于pwdecho $USER #相当于whoamiecho $[RANDOM%100+1] #生成1-100的随机整数\n\n自定义变量变量名&#x3D;值；变量名和&#x3D;之间不能用空格用$符引用变量\nxm=&quot;哥哥&quot;age=5echo $xmecho &quot;$xm是$age岁&quot;#命令赋值需要用反点``引起n=`cat /etc/passwd | grep -c &quot;root&quot;` echo $n\n\n特殊变量$n  n为number，$0代表该脚本名称，$1-$9代表第一到第九个参数（位置参数）$#  获取所有输入参数的个数，常用于循环；$@  代表命令行中所有的参数，$@会把每个参数区分对待；$?  返回最后一次命令执行的状态，返回0代表正确执行，返回非0代表执行不正确。\nread 读取终端输入-p：指定读取值时的提示符；-t：指定读取值时等待的时间（秒）。\nread -p &quot;请输入密码：&quot; s read -p &quot;请输入密码：&quot; -t 10 pw #10秒后关闭输入\n\n运算符赋值运算符 &#x3D;比较运算符字符串比较： &#x3D;&#x3D; 等于  !&#x3D; 不等于数值比较：-eq 等于 -ne 不等于 -lt 小于 -le 小于等于 -gt 大于 -ge 大于等于类型权限：-f 存在且是文件 -d 存在且是目录 -r 读 (read) -w 写(write) -x 执行 (execute)\n逻辑运算符-a 与  -o 或  ! 非\n算数运算符$((运算式)) 或 $[运算式]+ , - , *, &#x2F;, % 加，减，乘，除，取余\n选择结构if [ 条件判断 ]\nif [ 条件判断式 ] 中括号里面两边要加空格!\n\nsex=&quot;男&quot; if [ $sex == &quot;男&quot; ] then echo &quot;去做饭&quot; elif [ $sex == &quot;女&quot; ] then echo &quot;去逛街&quot; else echo &quot;其他&quot; fi# 多条件应用a=3 b=4 c=&quot;s&quot; if [ $a -lt $b -a $c == &quot;s&quot; ] then echo &quot;true&quot; else echo &quot;false&quot; fi # 判断文件是否存在 if [ -f /root/a.txt ] then echo &quot;是文件&quot; cat /root/a.txt else echo &quot;不是文件&quot; fi\n\ncase 等值判断sex=&quot;男&quot; case $sex in &quot;男&quot;) echo &quot;打游戏&quot; ;; &quot;女&quot;) echo &quot;去逛街&quot; ;;*) echo &quot;其他&quot; ;; esac\n\n循环结构for 循环for i in `seq 1 5` do \techo $i done # 位置参数 for i in $@ do \techo $i done# 字符串 s=&quot;a b c dd e&quot; for i in $s do \techo $i done# 命令结果 s=`ls /root`echo $s for i in $s do \techo $i done# 二重循环：循环里面嵌套循环，外层循环先开始，内层循环结束后，再开始外层的下一个循环for i in `seq 1 5` do \tfor j in `seq 1 5` \tdo \t\techo -n &quot;$j&quot;  #内层循环 \tdone \techo &quot;$i&quot;  #外层循环 done#乘法表（双重嵌套）for i in `seq 1 9` do \tfor j in `seq 1 $i` \tdo \t\techo -n &quot; $j * $i = $(($i * $j)) &quot; \tdone \techo &quot;&quot; done\nwhile 循环i=1 while [ $i -le 10 ] do \techo $i \ti=$(($i+1)) done # 不确定循环次数 read -p &quot;及格了吗？（y/n）：&quot; answer while [ $answer == &quot;n&quot; ] do \techo &quot;学习做作业考试&quot; \tread -p &quot;及格了吗？（y/n）：&quot; answer done echo &quot;终于及格了&quot;\n\n循环控制只影响离自己最近的那个循环break 跳出当前循环（如果有多重循环会继续执行上一层循环）continue 跳出语句（不再往下执行），继续执行当前循环的下一个元素\n作业练习#1.输入两个数字判断两个数字的大小 read -p &quot;请输入第一个数&quot; num1read -p &quot;请输入第二个数&quot; num2if [ $num1 -eq $num2 ]then echo &quot;$num1=$num2&quot;elif [ $num1 -gt $num2 ]then echo &quot;$num1&gt;$num2&quot;else echo &quot;$num1&lt;$num2&quot;fi#2.输入一个数字输出这个数字是偶数还是奇数 read -p &quot;请输入一个整数: &quot; numif [ $[num%2] -eq 0 ]then echo &quot;$num 是偶数&quot;else echo &quot;$num 是奇数&quot;fi#3.判断一个年份是否是闰年,400整除是世纪闰年，100不整除并且被4整除是闰年，其余是平年read -p &quot;请输入一个年份：&quot; yif [ $[y%400] -eq 0 -o $[y%100] -ne 0 -a $[y%4] -eq 0 ]then echo &quot;$y是闰年&quot;else echo &quot;$y是平年&quot;fi#4.输入三个数，不考虑相等，有小到大打印输出 read -p &quot;输入三个数（用空格分隔）：&quot; num1 num2 num3# num1 &lt;= num2if [ $num1 -gt $num2 ]then    temp=$num1    num1=$num2    num2=$tempfi# num1 &lt;= num3if [ $num1 -gt $num3 ]then    temp=$num1    num1=$num3    num3=$tempfi# num2 &lt;= num3if [ $num2 -gt $num3 ]then    temp=$num2    num2=$num3    num3=$tempfiecho &quot;排序：$num1 $num2 $num3&quot;#5.编写脚本,将系统日志文件（/var/log/messages），拷贝到/root/文件夹中 cp /var/log/messages /root/#6.编写脚本，位置参数传入学生的姓名和班级，打印“我的名字叫xx，我的班级是xx班” echo &quot;我的名字叫$1，我的班级是$2班&quot;#7.用if，写一个shell脚本，运行时输入一个数字，如果是666则输出evil，如果是777则输出lucky, 如果是其他则输出human。 read -p &quot;请输入一个数字：&quot; numif [ $num -eq 666 ]then echo &quot;evil&quot;elif [ $num -eq 777 ]then echo &quot;lucky&quot;else echo &quot;human&quot;fi#8.用case方法改写上面的功能。read -p &quot;请输入一个数字：&quot; numcase $num in&quot;666&quot;)echo &quot;evil&quot;;;&quot;777&quot;)echo &quot;lucky&quot;;;*)echo &quot;human&quot;;;esac#9.判断/root/hosts是否是存在并且是普通文件，如果不存在则新建一个，如果已经存在，则追加写入当前时间到此文件中 path=&quot;/root/hosts&quot;if [ -f $path ]then \tdate &gt;&gt; $path\techo &quot;是文件，已追加&quot;else \ttouch $path\techo &quot;没有文件，已新建&quot;fi#10.判断当前用户是否为root，如果不是则打印非root账号，是的话就执行ifconfig查看 网卡信息（$USER获取当前用户） if [ $USER == &quot;root&quot; ]then ifconfigelse echo &quot;$USER&quot;fi#11.位置参数传递一个绝对路径的文件，添加所有人可执行权限且提示添加执行权限成功，如果没有传递参数提示没有传递文件。 if [ $# -eq 0 ]then echo &quot;没有传递文件&quot;elif [ ! -f &quot;$1&quot; ]\tthen echo &quot;&#x27;$1&#x27; 不是文件&quot;else    chmod a+x &quot;$1&quot;    echo &quot;已为 &#x27;$1&#x27; 添加所有人可执行权限&quot;fi#12.编写脚本判断mysql是否正常启动（端口号3306，查看端口netstat -nltp,然后grep过 滤返回行数，判断行数是否大于0）port=`netstat -nltp | grep -c &quot;3306&quot;`if [ $port -gt 0 ]then    echo &quot;MySQL服务已启动&quot;else    echo &quot;MySQL服务未启动&quot;fi#13.首先显示当天日期， 然后查找给定的用户是否在系统中工作（cat /etc/passwd）。 如果在系统中，就输出一条欢迎语句（例如 hello，root！）；如果不在系统中，就 输出一条语句（waiting for root！） dateread -p &quot;请输入要查找的用户：&quot; usrn=`cat /etc/passwd | grep -c $usr`if [ $n -gt 0 ]then echo &quot;hello,$usr！&quot;else echo &quot;waiting for $usr！&quot;fi#14.接受一个参数，若给定参数不是目录， 则给出提示信息； 否则使用 ls -l 命令列出该目录下的内容，并输出有多少个子目录（d 开头），多少 个普通文件(-开头）。显示示例如下： 目录的数量：16 文件的数量：25read -p &quot;请输入一个路径:&quot; pathif [ -d $path ]then    ls -l $path    d=`ls -l $path | grep -c &quot;^d&quot;`    f=`ls -l $path | grep -c &quot;^-&quot;`    echo &quot;目录数量：$d&quot;    echo &quot;文件数量：$f&quot;else    echo &quot;&#x27;$path&#x27;不是目录&quot;fi#上机练习11#1.写一个循环，输出20-40 for i in `seq 20 40`do    echo $idone#2.从1-50的单数，倒序for i in `seq 50 -1 1`do\tif [ $[i%2] -ne 0 ]    then echo $i    fidone#3.计算并显示 1 到 100 之间的奇数之和for i in `seq 1 100`do    if [ $[i%2] -ne 0 ]    then        sum=$[sum+$i]    fidoneecho $sum#5.有若干只鸡兔同在一个笼子里，从上面数有35个头，从下面数有94只脚。问笼中各有多少只鸡和兔？ ck=35rb=0leg=70while [ $leg -ne 94 ]do    ck=$[ck-1]    rb=$[rb+1]    leg=$[ck*2+rb*4]doneecho &quot;$ck只鸡和$rb只兔&quot;#6.猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个，第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前 一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。n=1for i in `seq 1 9`do    n=$[(n+1)*2]doneecho &quot;第一天共摘了$n个桃&quot;#7.创建用户组wanmei，批量建立用户wm1到wm9,用户属于wanmei组,创建完成查看/etc/group和/etc/passwd文件 g=&quot;wanmei&quot;u=&quot;wm&quot;groupadd $gfor i in `seq 1 9`do    u=wm$i    useradd -g $g $udonecat /etc/group /etc/passwd#8.删除上面的用户和用户组 g=&quot;wanmei&quot;u=&quot;wm&quot;for i in `seq 1 9`do    u=wm$i    userdel $udonegroupdel $g#9.实现传入一个目录作为参数，如果传入的不是目录则提示不是目录，如果是目录则将该目录下所有的普通文件的文件名都罗列出来 read -p &quot;请输入一个目录:&quot; dirif [ ! -d $dir ]then    echo &quot;不是目录&quot;else    names=`ls $dir`    echo &quot;$names&quot;        for i in $names            do                if [ -d $dir/$i ] #必须要带绝对路径                then                    echo &quot;$i&quot;                fi            donefi#10.猜数字游戏：电脑随机产生一个100以内的数字（1-99），通过每次键盘输入来猜数字，输入的小了就提示往大猜，输入大了就提示往小里猜， 直到输入正确数字（通过$RANDOM获取随机数）n=$[RANDOM%99+1]read -p &quot;现在生成了一个1-99的随机数，请输入你猜的数字：&quot; numwhile truedo    if [ $num -eq $n ]    then        echo &quot;恭喜你猜对了！&quot;        break    elif [ $num -lt $n ]    then        read -p &quot;猜错了，往大猜：&quot; num    elif [ $num -gt $n ]    then        read -p &quot;猜错了，往小猜：&quot; num    else        read -p &quot;输入不合法，请重新输入：&quot; num    fidone"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.23%E6%80%BB%E7%BB%93%EF%BC%9A%E5%87%BD%E6%95%B0/","content":"二重循环循环里面嵌套循环，外层循环先开始，内层循环结束后，再开始外层的下一个循环\nfor i in `seq 1 5` do \tfor j in `seq 1 5` \tdo \t\techo -n &quot;$j&quot;  #内层循环 \tdone \techo &quot;$i&quot;  #外层循环 done#乘法表（双重嵌套）for i in `seq 1 9` do \tfor j in `seq 1 $i` \tdo \t\techo -n &quot;$j*$i = $(($i*$j))&quot; \tdone \techo &quot;&quot; done\n\n循环控制只影响离自己最近的那个循环break 跳出当前循环（如果有多重循环会继续执行上一层循环）continue 跳出语句（不再往下执行），继续执行当前循环的下一个元素\n函数自定义函数name()&#123;\techo &quot;hello 黄文哲&quot;&#125;getSum()&#123;\tsum=$(($1+$2))  #这里的$1 $2是调用函数时的位置参数\techo &quot;$sum&quot;\tname  #函数可以互相嵌套，前提是被嵌套的函数要先声明&#125;#执行函数getSum $1 $2  #这里的$1 $2是脚本的位置参数（./test.sh 1 2）read -p &quot;请输入数字1:&quot; n1read -p &quot;请输入数字2:&quot; n2he=`getSum $n1 $n2` #调用函数echo &quot;$he&quot;\n\n递归（自己调用自己）#输入一个目录显示里面的所有目录getDir()&#123;    names=`ls $1`    for i in $names        do            if [ -d $1/$i ]            then                echo &quot;$1/$i&quot;                getDir $1/$i            fi        done&#125;\n作业练习# 上机练习12#1.99乘法表 for i in `seq 1 9` \tdo \t\tfor j in `seq 1 $i` \t\tdo \t\t\techo -n &quot;$j×$i=$(($i*$j)) &quot; \t\tdone \t\techo &quot;&quot; \tdone#2.拼接一个直角三角形 for i in `seq 1 5`    do        for j in `seq 1 $i`            do                echo -n &quot;*&quot;            done        echo &quot; &quot;    done#3.上个练习基础上拼接一个等腰三角形 for i in `seq 1 5`    do      for k in `seq 1 $((5-$i))`            do               echo -n &quot; &quot;             done        for j in `seq 1 $(($i*2-1))`            do                echo -n &quot;*&quot;            done        echo &quot; &quot;    done#4.上个练习基础上拼接一个菱形 for i in `seq 1 9`    do        if [ $i -le 5 ]        then            for k in `seq 1 $((5-$i))`                do                    echo -n &quot; &quot;                 done            for j in `seq 1 $(($i*2-1))`                do                    echo -n &quot;*&quot;                done            echo &quot; &quot;        else            for n in `seq 1 $(($i-5))`                do                    echo -n &quot; &quot;                 done            for m in `seq 1 $(((10-$i)*2-1))`                do                    echo -n &quot;*&quot;                done            echo &quot; &quot;        fi    done#5.打印输出100至200之间的全部素数，输出素数并统计共有多少个素数。 注：质数(prime number)又称素数，有无限个。一个大于1的自然数，除了1和它本身外，不能被其他自然数整除，换句话说就是该数除了1和它本身以外不再有其他的因数;否则称为合数。for i in `seq 100 200`    do        n=$(($i-1))        for j in `seq 2 $n`            do                if [ $(($i%$j)) -eq 0 ]                    then break                elif [ $j -eq $n ]                    then                         echo &quot;$i&quot;                        count=$(($count+1))                fi            done    doneecho &quot;共有$count个素数&quot;#上机练习13#1.编写函数, 函数传入三个参数,输出积getJi()&#123;    ji=$(($1*$2*$3))    echo &quot;$he&quot;&#125;#2.编写函数，传递一个数字参数5，实现1到5的累加，返回和，输出&quot;和是：15&quot; getSum()&#123;    for i in `seq 1 $1`        do            sum=$(($sum+$i))        done    echo &quot;和是：$sum&quot;&#125;#3.编写函数,当该函数没有参数或参数多于2个, 输出-1,只有一个参数时, 输出1,有两个参数 时, 输出2 提示：使用$#判断参数的个数 countNum()&#123;    if [ $# -eq 1 -o $# -eq 2 ]    then        echo &quot;$#&quot;    else        echo &quot;-1&quot;    fi&#125;#4.编写函数，实现传入一个目录参数，将该目录下（递归）所有的文件都打印出来（遇到文件则打印，遇到目录则继续调函数递归） getFile()&#123;    names=`ls $1`    for i in $names        do            if [ -f $1/$i ]            then                echo &quot;$1/$i&quot;            elif [ -d $1/$i ]            then                getFile $1/$i            fi        done&#125;#5.编写函数，传入一个数字n，实现n的阶乘,效果如下：jiecheng()&#123;    txt=&quot;$1!=$1&quot;    res=1    for i in `seq $1 -1 1`        do            if [ $i -ne $n ]                then txt=$txt*$i            fi            res=$(($res*$i))        done    echo &quot;根据数字$1得到阶乘表达式是：$txt=$res&quot;&#125;read -p &quot;请输入数字：&quot; njiecheng $n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.24%E6%80%BB%E7%BB%93%EF%BC%9Ashell%E5%B7%A5%E5%85%B7/","content":"shell工具grep 、sed、awk被称为linux中的”三剑客”grep  更适合单纯的查找或匹配文本sed  更适合编辑匹配到的文本awk  更适合格式化文本，对文本进行较复杂格式处理\nsortsort命令可将文件进行排序，并将排序结果标准输出\n参数说明-n  依照数值的大小排序（升序）-r  以相反的顺序来排序-t  设置排序时所用的分隔字符-k  指定需要排序的列\n例如，文件夹sh下有如下sort.txt文件：bb:40:5.4bd:20:4.2xz:50:2.3cls:10:3.5ss:30:1.6\n按照”：”分割后的第三列倒序排序：\nsort -t &quot;:&quot; -nrk 3 /root/sh/sort.txt#输出结果bb:40:5.4 bd:20:4.2 cls:10:3.5 xz:50:2.3 ss:30:1.6\nsedstream editor（流编辑器）的简称它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中（“模式空间“），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。\n参数说明p 打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行i 插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)a 新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)s 取代，可以直接进行取代的工作，通常这个 s 的动作可以搭配正则表示法\n#1.显示文件的第 2 行的内容： sed -n &#x27;2 p&#x27; /root/sh/sort.txt #2.显示文件的第 2 行到第 4 行的内容： sed -n &#x27;2,4 p&#x27; /root/sh/sort.txt #3.将文件中的bb全部替换为BB sed &#x27;s/bb/BB/g&#x27; /root/sh/sort.txt #4.以文件bb开头的上一行添加 sed &#x27;/^bb/i hello&#x27; /root/sh/sort.txt #5.将文件中的d全部删除 sed &#x27;s/d//g&#x27; /root/sh/sort.txt# 可以使用管道符 | 连续处理，接着重定向保存# 使用 | 连续处理时只需在第一个语句里指定文件路径，后续的处理不能写！# 命令过长需要换行时可以使用\\拼接# 使用 | 换行时可不使用 \\sed &#x27;s/bd/BB/g&#x27; /root/sh/sort.txt \\| sed &#x27;s/ss/SS/g&#x27; | sed &#x27;s/cls/AA/g&#x27; \\| sort -t &quot;:&quot;  -nrk 3 | sed &#x27;/^bb/i one,two,three&#x27; \\| sed &#x27;s/:/./g&#x27; &gt; /root/sh/sort.csvsed &#x27;s/bd/BB/g&#x27; /root/sh/sort.txt |sed &#x27;s/ss/SS/g&#x27; | sed &#x27;s/cls/AA/g&#x27; |sort -t &quot;:&quot;  -nrk 3 | sed &#x27;/^bb/i one,two,three&#x27; |sed &#x27;s/:/./g&#x27; &gt; /root/sh/sort.csv\n\n\nawk一个完整的awk命令格式：\nawk [options] &#x27;BEGIN&#123;command1&#125; &#123;command2&#125; END&#123;command3&#125;&#x27; file#[options]设置分隔字段#BEGIN可设置列名#command2设置打印的列#END可显示行列总数量#file表示文件路径\n-v FS 指定以什么对字段进行分隔-v OFS 指定输出的字段以什么分隔不写导出后的分隔符默认以空格划分\n内置参数NF 分割完字段的数量$1 代表文本行中的第 1 个数据字段$2 代表文本行中的第 2 个数据字段输出指定列：{print $1,$2}分隔符相同的情况输出一整行：{print}\n#1-3重要#1.以:为分隔符，打印第2列和第1列 awk -v FS=&quot;:&quot; &#x27;&#123;print $2,$1&#125;&#x27; /root/shell/sort.txt #2.以:为分隔符，打印第2列和第1列，列之间用,分割 awk -v FS=&quot;:&quot; -v OFS=&quot;,&quot; &#x27;&#123;print $2,$1&#125;&#x27; /root/shell/sort.txt #3.添加列保存为csv，下载，使用excel查看 awk -v FS=&quot;:&quot; -v OFS=&quot;,&quot; &#x27;BEGIN&#123;print &quot;one,two,three&quot;&#125;&#123;print $2,$1,$3&#125;&#x27; /root/shell/sort.txt &gt; /root/shell/sort.csv #4-5扩展#4.第二列大于30 awk -v FS=&quot;:&quot; &#x27;&#123; if($2&gt;30)&#123;print $2&#125;&#125;&#x27; /root/shell/sort.txt #5.行列总数量 awk -v FS=&quot;:&quot; &#x27;BEGIN&#123;n=0&#125;&#123;for(i=1;i&lt;=NF;i++)&#123;n++&#125; &#125;END&#123;print n&#125;&#x27; /root/shell/sort.txt\n作业练习#1.复制网卡文件/etc/sysconfig/network-scripts/ifcfg-ens33 到家目录，并且改名为 wangka.txt cp /etc/sysconfig/network-scripts/ifcfg-ens33 $HOME/wangka.txt#2.找到含有 IP 的行输出 cat wangka.txt | grep &quot;IPADDR&quot;#3.显示文件的第 3 行到第 5 行的内容 sed -n &#x27;3,5 p&#x27; $HOME/wangka.txt#4.将文件中的255全部替换为250 sed &#x27;s/255/250/g&#x27; $HOME/wangka.txt#5.以文件IPADDR开头的上一行添加hello sed &#x27;/^IPADDR/i hello&#x27; $HOME/wangka.txt#6.找到所有DNS，并且删掉sed &#x27;s/DNS//g&#x27; $HOME/wangka.txt#7.使用管道符连续处理4. 5. 6. 题，并且重定向结果保存为wangka.csvsed &#x27;s/255/250/g&#x27; $HOME/wangka.txt |sed &#x27;/^IPADDR/i hello&#x27; |sed &#x27;s/DNS//g&#x27; &gt; $HOME/wangka.csv#8. 根据wangka.csv文件自己灵活处理重定向为ip.txt,内容如下： # 192.168.145.151 # 250.250.250.0 # 192.168.145.2 # 8.8.8.8 # 114.114.114.114 sed -n &#x27;20,24 p&#x27; $HOME/wangka.csv |awk -v FS=&quot;\\&quot;&quot; &#x27;&#123;print $2&#125;&#x27; &gt; $HOME/ip.txt#9.ip.txt中以.分割，按照第一列进行降序排序 sort -t &quot;.&quot; -nrk 1 $HOME/ip.txt#10.ip.txt中以.为分隔符，打印第1列和第2列 awk -v FS=&quot;.&quot; &#x27;&#123;print $1,$2&#125;&#x27; $HOME/ip.txt#11.ip.txt中以.为分隔符，打印第3列和第4列，列之间用,分割awk -v FS=&quot;.&quot; -v OFS=&quot;,&quot; &#x27;&#123;print $3,$4&#125;&#x27; $HOME/ip.txt#12.ip.txt中以.为分隔符，列之间用,分割，且加一行，保存为ip.csv,格式如下： # one,two,three,four # 192,168,145,151 # 250,250,250,0 # 192,168,145,2 # 8,8,8,8 # 114,114,114,114awk -v FS=&quot;.&quot; -v OFS=&quot;,&quot; &#x27;BEGIN&#123;print &quot;one,two,three,four&quot;&#125;&#123;print $1,$2,$3,$4&#125;&#x27; $HOME/ip.txt &gt; $HOME/ip.csv#13.在家目录下创建一个names.txt的文件，写入班级的所有同学的姓名，每个一行，每次随机产生一个姓名c=`cat names.txt | wc -l`n=$[RANDOM%$c+1]sed -n &quot;$n p&quot; $HOME/names.txt#14.批量修改家目录下的文件扩展名，使用位置参数传递两种扩展名，例如txt文件为csv 文件。（注：碰到特殊符号使用\\进行转义）cdf=`ls *.$1`for i in $f    do        new=`echo &quot;$i&quot; | sed &quot;s/\\.$1$/.$2/&quot;`        mv $i $new    done"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5Liunx/5.26%E6%80%BB%E7%BB%93%EF%BC%9A%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E3%80%81%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%92%8C%E5%A4%87%E4%BB%BD/","content":"数据清洗数据清洗即是将爬下来未处理的数据文件（txt、json等格式），转化为csv文件，一般需要通过sed把里面不必要的字符删除，再以通过awk以一定规律分割，最后将脚本的处理结果重定向到csv文件中。\n一般处理思路：sed掐头-去尾-换行-置空值-删符号-删元素（列名）-awk分隔、添加列名 &gt; 重定向到csv\n\n\n\n操作类型\nsed&#x2F;awk 实现方案\n示例\n\n\n\n去除结构标记\n删除JSON头尾\nsed &#39;s/^&#123;&quot;data&quot;:\\[//; s/\\]&#125;$//&#39;\n\n\n字段分隔\n替换分隔符为换行符\nsed &#39;s/&#125;,&#123;/\\n/g&#39;\n\n\n特殊字符处理\n移除转义字符\nsed &#39;s/\\\\//g&#39;\n\n\n空值标准化\n统一空值表示\nsed &#39;s/&quot;&quot;/null/g&#39;\n\n\n引号处理\n删除所有引号\ntr -d &#39;&quot;&#39;\n\n\n字段提取\n按位置重组字段\nawk &#39;&#123;print $2,$1,$3&#125;&#39;\n\n\n导出的csv文件用excel打开可能中文显示会乱码（wps不会），需正常显示可如下操作：\n\n右键csv文件以txt方式打开-另存为-设置编码为ANSI-确定保存此后用excel打开此文件即可正常显示中文\n\n通过mysql对数据库服务器操作mysql -h127.0.0.1 -P3306 -uroot -proot123456 test -e &quot;select * from student&quot;\n-h：MySQL服务器的ip地址或主机名；-u：连接MySQL服务器的用户名；-e：执行mysql内部命令；-p：连接MySQL服务器的密码。-P：连接MySQL服务器的端口\nmysqldump 备份命令#1.导出education数据库里面的users表的表数据和表结构(下面以users表为例)mysqldump -u[用户名] -h[ip] -p[密码] -P[端口号] 数据库名 表名 &gt; 导出的文件名.sqlmysqldump -uroot -h127.0.0.1 -proot -p3306 education users &gt; d:/user.sql#导出多张表:mysqldump -uroot -proot --databases test --tables t1 t2 &gt; two.sql#2.只导出表结构不导表数据，添加“-d“命令参数mysqldump -uroot -h127.0.0.1 -proot -p3306 -d education users &gt; d:/user.sql#3.只导出表数据不导表结构，添加“-t&quot;命令参数mysqldump -uroot -h127.0.0.1 -proot -p3306 -t education users &gt; d:/user.sql#4.导出数据库的表结构和表数据(导入的时候需要指定数据库，保证指定的数据库存在)#导出命令mysqldump -h127.0.0.1 -P3306 -uroot -proot education  &gt; d:/database.sql#导入命令mysql -uroot -proot -h127.0.0.1 -P3306 education &lt; d:/database.sql#5.导出特定数据库的所有表格的表结构及其数据，添加&quot;--databases“命令参数(导入的时候直接执行导出sql就行)#导出命令mysqldump -h127.0.0.1 -P3306 -uroot -proot education --databases education &gt; database.sql#导入命令:mysql -uroot -proot -h127.0.0.1 -P3306 &lt;d:/all database.sql\n\n\n作业练习#上机练习15#1.清洗数据《infotest.txt》保存成《infotest.csv》 sed &#x27;s/\\[&#123;//g&#x27; /root/sh/infotest.txt |  #掐头sed &#x27;s/&#125;\\]//g&#x27; |  #去尾sed &#x27;s/&quot;&quot;/null/g&#x27; |  #置空值sed &#x27;s/&quot;//g&#x27; |  #删引号#删除元素说明sed &#x27;s/catchTime://g&#x27; |sed &#x27;s/commentCount://g&#x27; |sed &#x27;s/content://g&#x27; |sed &#x27;s/createTime://g&#x27; |sed &#x27;s/pic_list://g&#x27; |sed &#x27;s/praiseCount://g&#x27; |sed &#x27;s/reportCount://g&#x27; |sed &#x27;s/source://g&#x27; |#以逗号分割，添加列名，保存到csvawk -v FS=&quot;,&quot; -v OFS=&quot;,&quot; &#x27;BEGIN&#123;print &quot;catchTime,commentCount,content,createTime,pic_list,praiseCount,reportCount,source&quot;&#125;&#123;print $1,$2,$3,$4,$5,$6,$7,$8&#125;&#x27; \\&gt; /root/sh/infotest.csv\n![[Pasted image 20250526193700.png]]\n#2.清洗数据《douban.txt》保存成《douban.csv》sed &#x27;s/&#123;&quot;subjects&quot;:\\[&#123;//g&#x27; /root/sh/douban.txt |  #掐头sed &#x27;s/&#125;\\]&#125;//g&#x27; |  #去尾sed &#x27;s/&#125;,&#123;/\\n/g&#x27; |  #换行sed &#x27;s/\\\\//g&#x27; |  #删\\号sed &#x27;s/&quot;&quot;/null/g&#x27; |  #置空值sed &#x27;s/&quot;//g&#x27; |  #删引号#删除元素说明sed &#x27;s/id://g&#x27; |sed &#x27;s/title://g&#x27; |sed &#x27;s/episodes_info://g&#x27; |sed &#x27;s/rate://g&#x27; |sed &#x27;s/cover_x://g&#x27; |sed &#x27;s/url://g&#x27; |sed &#x27;s/playable://g&#x27; |sed &#x27;s/cover://g&#x27; |sed &#x27;s/cover_y://g&#x27; |sed &#x27;s/is_new://g&#x27; |#以逗号分割，添加列名，保存到csvawk -v FS=&quot;,&quot; -v OFS=&quot;,&quot; &#x27;BEGIN&#123;print &quot;id,title,episodes_info,rate,cover_x,url,playable,cover,cover_y,is_new&quot;&#125;&#123;print $8,$4,$1,$2,$3,$5,$6,$7,$9,$10&#125;&#x27; \\&gt;/root/sh/douban.csv\n![[Pasted image 20250526193548.png]]\n#上机练习16#编写shell脚本/root/shell/mysqlcsv.sh 实现：#1.如果douban表存在则删除 #2.如果douban表不存在则新建 #3.导入douban.csv数据到douban表中,建表过程为根据导入的csv文件自动创建表 #4.查询douban表验证结果#设置mysql连接参数dbhost=&quot;127.0.0.1&quot;  #主机名dbprot=3306  #端口dbuser=&quot;root&quot;  #用户名dbpass=&quot;root123456&quot;  #密码db=&quot;test&quot;  #表空间#如果douban表存在则删除 sql1=&quot;drop table if exists douban&quot;mysql -h$dbhost -P$dbprot -u$dbuser -p$dbpass $db -e  &quot;$sql1&quot;#获取第一行（列名）names=`head -n +1 /root/sh/douban.csv | sed &#x27;s/,/ /g&#x27;`#找出最后一个列名lastname=`echo &quot;$names&quot; | awk &#x27;&#123;print $NF&#125;&#x27;`#如果douban表不存在则新建 sql2=&quot;create table if not exists douban(&quot; for i in $names    do        if [ $i == &quot;$lastname&quot; ]        then             sql2=&quot;$sql2$i varchar(200))&quot;        else            sql2=&quot;$sql2$i varchar(200),&quot;        fi            donemysql -h$dbhost -P$dbprot -u$dbuser -p$dbpass $db -e  &quot;$sql2&quot;#导入数据sql3=&quot;LOAD DATA INFILE &#x27;/usr/local/mysql/data/douban.csv&#x27; INTO TABLE doubanCHARACTER SET utf8FIELDS TERMINATED BY &#x27;,&#x27;LINES TERMINATED BY &#x27;\\n&#x27;IGNORE 1 LINES&quot;mysql -h$dbhost -P$dbprot -u$dbuser -p$dbpass $db -e  &quot;$sql3&quot;#查看表和数据sql4=&quot;select * from douban&quot;mysql -h$dbhost -P$dbprot -u$dbuser -p$dbpass $db -e  &quot;$sql4&quot;\n![[Pasted image 20250526193754.png]]\n上机练习17.实现每天凌晨3点10分备份数据库test到&#x2F;root&#x2F;backup&#x2F;db\n#一、编写shell脚本为 /root/shell/backdb.sh #1.判断路径/root/backup/db是否存在，不存在创建，存在开始备份 #2.备份后的文件以时间命名，如20230401110101.sql #3.在备份的同时，检查是否有10天前的备份数据库文件，有则删除之 # 设置mysql连接参数dbhost=&quot;127.0.0.1&quot;  #主机名dbport=3306  #端口dbuser=&quot;root&quot;  #用户名dbpwd=&quot;root123456&quot;  #密码db=&quot;test&quot;  #表空间# 设置备份目录backup_dir=&quot;/root/backup/db&quot;# 1. 检查并创建备份目录if [ ! -d &quot;$backup_dir&quot; ]; then    mkdir -p &quot;$backup_dir&quot;    echo &quot;创建备份目录: $backup_dir&quot;else    echo &quot;备份目录存在: $backup_dir&quot;fi# 2. 生成带时间戳的备份文件名backup_file=&quot;$backup_dir/$(date +&#x27;%Y%m%d%H%M%S&#x27;).sql&quot;# 执行数据库备份echo &quot;开始备份数据库 $db 到 $backup_file&quot;mysqldump -h$dbhost -P$dbport -u$dbuser -p$dbpwd $db &gt; $backup_file# 检查备份是否成功if [ $? -eq 0 ]; then    echo &quot;数据库备份成功!&quot;else    echo &quot;数据库备份失败!&quot; &gt;&amp;2    exit 1fi# 3. 删除10天前的备份文件find &quot;$backup_dir&quot; -name &quot;*.sql&quot; -mtime +10 -exec rm -f &#123;&#125; \\;echo &quot;已清理10天前的备份文件&quot;# 显示当前备份文件echo &quot;当前备份文件:&quot;ls -lh &quot;$backup_dir&quot;/*.sql#二、编写定时任务，任务是执行上面的shell脚本sudo vim /etc/crontab#每天凌晨3点10分备份数据库10 3 * * * root /root/sh/backdb.sh"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/4.28%E6%80%BB%E7%BB%93%EF%BC%9A%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E3%80%81sql%E5%9F%BA%E7%A1%80/","content":"安装环境PLSQL Developer 又称 sqlpuls用户名：scott密码：oracle\n虚拟机环境：打开虚拟机Windows7 x64.vmx运行（win+r） cmd 输入 ipconfig 查看本机IP（IPv4）：192.168.48.128开始菜单 Net Manager 修改 本地-服务器命名-orcl 和 监听程序- LISTENER 的 主机名 为本机IP （192.168.48.128）进入 C:\\oraclient\\client64\\bin\\network\\admin 以及 C:\\oraclient\\client64\\network\\admin 修改 listener.ora 和 tnsnames.ora 的 HOST（127.0.0.1）为本机IP\n本机环境：安装sqlplus及汉化包帮助-注册-输入许可证信息将 instantclient_21_3 解压到D盘根目录进入 D:\\instantclient_21_3\\network\\admin 修改 tnsnames.ora 的 HOST 为 虚拟机本机IP（192.168.48.128）添加环境变量 变量名：TNS_ADMIN 变量值：D:\\instantclient_21_3\\network\\adminsqlplus-工具-首选项-连接Oracle主目录：D:\\instantclient_21_3OCI库：D:\\instantclient_21_3\\oci.dll\n数据库相关术语数据库（Database，DB）数据库管理系统（Batabase Management System，DBMS）结构化查询语言（Structured Query Language，SQL）关系型数据库（Relational Database，RDB）：目前应用最广泛的数据库。常见的五种关系型数据库管理系统：① Oracle Database：甲骨文公司 （用得最多）② SQL Server：微软公司③ DB2：IBM 公司（巨贵）④ PostgreSQL：开源⑤ MySQL：开源\n服务器：用于接收并处理其它程序发出的请求的程序（软件），或者是安装此类程 序的设备（计算机）。客户端：向服务器发出请求的程序（软件），或者是安装此类程序的设备（计算 机）。表（table）：类似 Excel，由行和列组成的二维表。行（Row）和列（Column） 字段：表中的列（垂直方向），叫做一个字段。记录：表的行（水平方向），叫做一条记录。【注意】关系数据库必须以行为单位 进行数据读写。单元格：行列交汇处。【注意】与 Excel 不同，一个单元格只能输入一个数据。\nSQL相关SQL是什么？结构化查询语言(Structured Query Language)，是数据库编程的核心语言。SQL 语句：用关键字、表名和列名等组合而成的一条语句。\nSQL分类\nDQL（Data Query Language，数据查询语言）:一种用于从数据库中检索数据的语 言,代表关键字为select。 \nDDL（Data Definition Language，数据定义语言）:用来创建数据库中的各种对象， 创建、删除、修改表的结构，代表关键字为create、drop、alter。 \nDML（Data Manipulation Language，数据操作语言）:用于数据库中对数据的操 纵，代表关键字为insert、delete 、update。 \nDCL（Data Control Language，数据控制语言）:用来授予或回收访问数据库的某种 特权。代表关键字为grant、revoke。 \nTCL（Trasactional Control Languag, 事务控制语言）：用于维护数据的一致性，包 括commit、rollback和savepoint三条语句。\n\nemp员工表列名empno 员工编号ename 员工姓名job 员工工作mgr 领导编号hiredate 聘用日期sal 工资comm 奖金deptno 部门编号![[image 1.png]]\n知识点三击即可选中某一条sql代码（或使用home将光标移动到本行开始，再使用shift+end选中本行）快捷键F8即可运行选中的代码\n单行注释：–注释文字多行注释：&#x2F;* 注释文字*&#x2F;\nselect查询语句显示的结果称为结果集（result set）\n关键字、表名不区分大小写selelct 后跟 列（字段），可选多个列，用逗号隔开，对列进行筛选；*代表所有列from 后跟 表；表名加点可显示列名：emp.enamewhere 后跟 条件判断式 ，对行进行筛选\n单引号转义自己时输入两个单引号可显示一个单引号，且任一边的单引号数量须为奇数\n别名为查询显示的每个输出字段或表达式取一个别名，以增加结果集的可读性，易于理解列 的含义！相当于起个外号一样，别名的效果范围仅在该SQL语句范围内，别名并不会改 变本名（列：空格 或 as；表：空格）select ename 姓名，sal as 工资 from emp eename列名起名为姓名，sal列名起名为工资，emp表名起为e![[image 2.png]]\n去重 distinct加在列名前，单列完全去重（多列只会去完全相同的记录，因此列数越多去重效果越差）![[image 3.png]]\n连接符 ||可将两个字段的字符串连接在一起，还可以在结果集中加入字符串（使用前提左边有值右边也有值）\nselect ename || &#x27;的工资是&#x27; || sal || &#x27;元&#x27; 工资信息 from emp![[image 4.png]]\n\n虚拟表 dual （做测试，看系统日期）select sysdate from dual\n![[image 5.png]]\n伪列 rownum只能从1开始（rownum只能小于任何数和等于1）根据查询结果集生成的一个列，在物理上不真实存在![[image 6.png]]\nrowid在数据插入到在数据插入到表里的时候就生成的，真实一直存在，有点类似身份证，用于区分数据的唯一性![[image 7.png]]\n上机作业--1. 查询emp表中员工的名字和工资select ename, sal from emp;--2. 查询emp表中员工的编号,名字,奖金select empno, ename, comm from emp;--3. 查询部门编号和部门名称select deptno, dname from dept;--4. 查询员工名字和入职日期(列名中文显示 名字, 入职日期)select ename 名字, hiredate 入职日期 from emp;--5. 查询员工编号，名字，经理编号select empno,  ename, mgr from emp;--6. 查询公司里的所有部门的部门编号（去重）select distinct deptno from emp;--7. 查询员工的姓名和工资，按这种格式显示：simth的工资是800块select ename || &#x27;的工资是&#x27; || sal || &#x27;块&#x27;  工资信息 from emp;--8. 使用虚拟表来查看系统日期select sysdate from dual;--9. 查看员工表的前五条数据select emp.*, rownum from emp where rownum&lt;=5;--10. 查看员工表的rowidselect emp.*,rowid from emp;"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/4.29%E6%80%BB%E7%BB%93%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%BB%BA%E8%A1%A8/","content":"数据类型![[Pasted image 20250428191815.png]]\n字符类型char：用于存储 固定长度 的字符串。最大长度为2000个字节。varchar2：用于存储字符串数据。会根据实际数据的长度自动调整，因此在大多数情况下都会使用varchar2类型。最大长度是4000个字节。中文（包括符号）占两个字节，英文占一个\nselect length(&#x27;字符串a，&#x27;) from dual --结果5（不区分中文）select lengthb(&#x27;字符串a，&#x27;) from dual --结果9（区分中文）\n\n**数值类型 **number：具有精度和范围两个参数。精度指定所有数字位的个数，范围指定小数的位数。 如number（7,2）总位数7位，其中2位是小数，小数点前有5位整数，小数位数不能超过总位数。字符类型原理上不能用于运算，因此需要运算的数据需要使用number类型\n**日期时间类型 **date：可以存储日期和时间的组合数据。结合oracle提供的日期时间函数便地处理数据。日期可直接加减，不能乘除，加的是日期\nselect sysdate+365 from dual\ntimestamp：时间戳类型,可存放世纪、纪元、年、月、日、时、分、秒还可以存放秒后6 位。 一般只有对时间要求比较严格的业务（如话费计费）才用\nCLOB&#x2F;BLOBCLOB：大文本文件类型，可存放word,excel等文档。BLOB：二进制文件类型，可存放视频、音频等。\n三大范式 （面试会问）\n第一范式：原子性的，不可分。 *（列尽可能细分）*所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。 \n第二范式：要求实体的属性完全依赖于主关键字。（一张表只做一件事） 所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。 \n第三范式 ：属性不依赖于其它非主属性。（关系近） 第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。 满足第三范式（3NF）必须先满足第二范式（2NF）。\n\n数据存储方式oracle数据库的存储结构可以分为逻辑存储结构和物理存储结构,对于这两种存储结构， oracle是分别进行管理的。\n逻辑存储结构：oracle内部的组织和管理数据的方式。oracle在逻辑上将保存的数据划分为一个个小单元来进行存储和维护，更高一级的逻辑存储结构都是由这些基本的小单元组成的。 逻辑结构类型按照尺寸从小到大分可分为：块(block)–&gt;区(extent)–&gt;段(segment)–&gt;表空间(tablespace）\n物理存储结构：oracle外部（操作系统）组织和管理数据的方式。Oracle数据库逻辑上由一个或多个表空间组成，每个表空间在物理上由一个或多个数据 文件组成，而每个数据文件是有数据块构成的。所以，逻辑上数据存放在表空间中，而物理上存储在表空间所对应的数据文件中。构成数据库物的物理文件主要有三种： \n\n数据文件：存放数据库数据。 \n控制文件：存放数据库的基本信息，告诉数据库到哪里找到数据文件和重做日志文件等。对数据库的成功启动和正常运行是很重要的。 \n重做日志文件：存放对数据的改变。至少两组，Oracle以循环方式来使用它们。\n\n表和表空间的关系表空间是由若干个数据段组成，存放表，视图，索引等。一个表只能属于一个表空间， 一个表空间可以放任意多个表，一个表空间至少有一个存储文件（.dbf结尾的文件），可以有多个，而且这多个数据文件可以在不同位置，一个用户有一个默认的表空间，一个用户可以在默认表空间外的其它表空间建表。\n创建表空间create tablespace 表空间名 datafile ‘数据文件路径’ size 初始大小（2G） autoextend on next 每次扩展的大小(100M) maxsize 最大容量（unlimited）;\ncreate tablespace huangwenzhe429 --真的表空间名datafile &#x27;C:\\workspace\\sql\\huangwenzhe429.dbf&#x27; --生成的文件名，可以不同，但建议与表空间名一样，数据库所在系统（虚拟机环境）应有对应路径size 100M autoextend on next 50M maxsize unlimited;--起始空间100M，用完后自动分配50M,最大空间无限\n登录system管理员给用户权限（管理员用户名：system）\n--grant 权限 to 用户名;grant dba to scott --给scott用户管理员权限grant resource,connect to scott; --连接权限和资源权限 grant create any table to scott; --建表权限 grant create any tablespace to scott; --建表空间权限 grant select any table to scott; --只读权限 grant create any view to scott; --创建视图权限 grant select any table to scott; --预编译表的权限--查看角色权限信息 select * from role_sys_privs; \n用户权限对比表： https://blog.csdn.net/weixin_36470210/article/details/116318174\n创建临时表空间一般存放select查询出来的虚拟表\ncreate temporary tablespace huangwenzheTemp429 tempfile &#x27;C:\\workspace\\sql\\huangwenzheTemp429.dbf&#x27; size 100M autoextend on next 50M maxsize unlimited;\n创建用户create user 用户名 identified by 密码 default tablespace 表空间名 temporary tablespace 临时表空间名;default后面的语句是为用户指定默认表空间和临时表空间，如果不指定，默认的表空间 是users表空间，临时表空间是temp\ncreate user huangwenzhe --用户名identified by oracle --密码default tablespace huangwenzhe429 --表空间名temporary tablespace huangwenzheTemp429;  --临时表空间名\n删除表空间drop tablespace huangwenzhe including contents;\nincluding contents选项用于删除表空间时包含其内容。如果不使用这个选项，表空间会 被删除，但数据文件仍然存在，磁盘空间不会被释放。使用这个选项可以确保表空间及 其内容被完全删除，从而释放磁盘空间\n命令窗口登陆数据库sqlplus 用户名&#x2F;密码@数据库sqlplus scott&#x2F;oracle@orcl（此处不需要分号，但命令窗口写sql语句结束一定要加分号）![[Pasted image 20250429122129.png]]命令窗口操作数据库应在数据库所在系统（虚拟机环境）中进行\n扩容表空间alter tablespace huangwenzhe429 add datafile &#x27;C:\\workspace\\sql\\huangwenzhe429.dbf&#x27; size 100m autoextend on next 10m maxsize unlimited;\n\n常见问题system登录报错： ORA-01017（用户名&#x2F;口令无效; 登录被拒绝）打开cmd命令窗，输入sqlplus &#x2F; as sysdba1.修改密码：alter user 用户名 identified by 密码;2.用户被锁定，解锁：alter user 用户名 account unlock;\n建表相关三大数据类型：number  varchar2  date\n六大约束\n\nnot null 非空约束  \nunique 唯一约束  \nprimary key 主键约束（非空&amp;唯一）\ndefault 默认约束\ncheck 检查约束（唯一带条件判断的约束）\nreferences 外键约束\n\n有外键约束的表为从表，没有的为主表，建表先主后从，删表先从后主\n重复数据 &#x3D; 冗余数据null &#x3D; 空列名不应使用会高亮的关键字\n创建表create table bm(  --表名为bm\tbmno number(4) primary key,\tbmmc varchar2(20) unique,\tbmdz varchar2(20) not null);--列级约束create table yg( --表名为yg\tygno number(6) primary key, --主键约束\tygxm varchar2(20) not null, --非空约束\tjob varchar2(20) not null, --not null无法使用表级约束\trzrq date default sysdate, --默认约束，默认为当前日期\tgz number(7,2) check(gz&gt;=1500), --唯一一个带条件判断的约束\tbmno number(4) references bm(bmno), --外键约束\tconstraint zjys primary key(ygno), --表级约束\tconstraint wjys foreign key(bmno) references bm(bmno)\t--表级约束语法\t--constraint 约束名 约束类型(列名))--复合主键必须用表级约束create table cj(\tsno number(5),\tcourse varchar2(20),\tscore number(6,3),\tconstraint fhzj primary key(sno,course))--创建一个和select查询语句查询结果一样的表（包括结构和数据）create table bm3 asselect * from scott.dept\n\n插入数据insert into bm values(10,&#x27;销售部门&#x27;,&#x27;桂林市&#x27;);\n\n删除表drop table bm\n\n作业练习表空间--创建表空间create tablespace huangwenzhe429 datafile &#x27;C:\\workspace\\sql\\huangwenzhe429.dbf&#x27; size 100M autoextend on next 50M maxsize unlimited;--给予管理员权限grant dba to scott;--创建临时表空间create temporary tablespace huangwenzheTemp429 tempfile &#x27;C:\\workspace\\sql\\huangwenzheTemp429.dbf&#x27; size 100M autoextend on next 50M maxsize unlimited;--创建用户create user huangwenzheidentified by oracle default tablespace huangwenzhe429 temporary tablespace huangwenzheTemp429;--给予用户管理员权限grant dba to huangwenzhe;--查看别的用户的表select * from scott.emp;select * from scott.dept;--删除表空间drop tablespace huangwenzhe429 including contents;\n\n学生管理系统--创建teacher表create table teacher(       TNO varchar2(10) primary key,       TNAME varchar2(20) not null);--插入teacher数据insert into teacher values(&#x27;t001&#x27;,&#x27;刘阳&#x27;);insert into teacher values(&#x27;t002&#x27;,&#x27;谌燕&#x27;);insert into teacher values(&#x27;t003&#x27;,&#x27;胡明星&#x27;);--查看/删除teacher表select * from teacherdrop table teacher--创建student表create table student(       SNO varchar2(20) primary key,       SNAME varchar2(30),       SAGE number(2) check(SAGE between 6 and 40),       SSEX varchar2(5) default &#x27;男&#x27;);--插入student数据insert into student values(&#x27;s001&#x27;,&#x27;张三&#x27;,23,&#x27;男&#x27;);insert into student values(&#x27;s002&#x27;,&#x27;李四&#x27;,23,&#x27;男&#x27;);insert into student values(&#x27;s003&#x27;,&#x27;吴鹏&#x27;,25,&#x27;男&#x27;);insert into student values(&#x27;s004&#x27;,&#x27;琴沁&#x27;,20,&#x27;女&#x27;);insert into student values(&#x27;s005&#x27;,&#x27;王丽&#x27;,20,&#x27;女&#x27;);insert into student values(&#x27;s006&#x27;,&#x27;李波&#x27;,21,&#x27;男&#x27;);insert into student values(&#x27;s007&#x27;,&#x27;刘玉&#x27;,21,&#x27;男&#x27;);insert into student values(&#x27;s008&#x27;,&#x27;萧蓉&#x27;,21,&#x27;女&#x27;);insert into student values(&#x27;s009&#x27;,&#x27;陈萧晓&#x27;,23,&#x27;女&#x27;);insert into student values(&#x27;s010&#x27;,&#x27;陈美&#x27;,22,&#x27;女&#x27;);insert into student values(&#x27;s12&#x27;,&#x27;谢丰琴&#x27;,20,&#x27;女&#x27;);insert into student values(&#x27;s13&#x27;,&#x27;谢中菊&#x27;,20,&#x27;男&#x27;);insert into student values(&#x27;s14&#x27;,&#x27;谢一才&#x27;,20,&#x27;男&#x27;);--查看/删除student表select * from studentdrop table student--创建course表create table course(       CNO varchar2(10) primary key,       CNAME varchar2(30),       TNO varchar2(20) references teacher(tno));--插入course数据insert into course values(&#x27;c001&#x27;,&#x27;J2SE&#x27;,&#x27;t002&#x27;);insert into course values(&#x27;c002&#x27;,&#x27;Java Web&#x27;,&#x27;t002&#x27;);insert into course values(&#x27;c003&#x27;,&#x27;SSH&#x27;,&#x27;t001&#x27;);insert into course values(&#x27;c004&#x27;,&#x27;Oracle&#x27;,&#x27;t001&#x27;);insert into course values(&#x27;c005&#x27;,&#x27;SQL SERVER 2005&#x27;,&#x27;t003&#x27;);insert into course values(&#x27;c006&#x27;,&#x27;C#&#x27;,&#x27;t003&#x27;);insert into course values(&#x27;c007&#x27;,&#x27;JavaScript&#x27;,&#x27;t002&#x27;);insert into course values(&#x27;c008&#x27;,&#x27;DIV+CSS&#x27;,&#x27;t001&#x27;);insert into course values(&#x27;c009&#x27;,&#x27;PHP&#x27;,&#x27;t003&#x27;);insert into course values(&#x27;c010&#x27;,&#x27;EJB3.0&#x27;,&#x27;t002&#x27;);--查看/删除course表select * from coursedrop table course--创建sc表create table sc(       SNO varchar2(10) references student(sno),       CNO varchar2(10) references course(cno),       SCORE number(5,2) check(SCORE between 0 and 100),       constraint fhzj primary key(sno,cno))--插入sc数据insert into sc values(&#x27;s001&#x27;,&#x27;c001&#x27;,78.90);insert into sc values(&#x27;s002&#x27;,&#x27;c001&#x27;,80.90);insert into sc values(&#x27;s003&#x27;,&#x27;c001&#x27;,81.90);insert into sc values(&#x27;s004&#x27;,&#x27;c001&#x27;,60.90);insert into sc values(&#x27;s001&#x27;,&#x27;c002&#x27;,82.90);insert into sc values(&#x27;s002&#x27;,&#x27;c002&#x27;,72.90);insert into sc values(&#x27;s003&#x27;,&#x27;c002&#x27;,81.90);insert into sc values(&#x27;s001&#x27;,&#x27;c003&#x27;,59.00);insert into sc values(&#x27;s12&#x27;,&#x27;c005&#x27;,89.00);insert into sc values(&#x27;s13&#x27;,&#x27;c008&#x27;,87.00);insert into sc values(&#x27;s13&#x27;,&#x27;c007&#x27;,65.00);insert into sc values(&#x27;s13&#x27;,&#x27;c010&#x27;,85.00);insert into sc values(&#x27;s14&#x27;,&#x27;c007&#x27;,100.00);insert into sc values(&#x27;s14&#x27;,&#x27;c005&#x27;,60.00);insert into sc values(&#x27;s14&#x27;,&#x27;c006&#x27;,92.00);insert into sc values(&#x27;s14&#x27;,&#x27;c008&#x27;,95.00);insert into sc values(&#x27;s14&#x27;,&#x27;c010&#x27;,91.00);insert into sc values(&#x27;s14&#x27;,&#x27;c004&#x27;,57.00);--查看/删除sc表select * from scdrop table sc"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/5.10%E6%80%BB%E7%BB%93%EF%BC%9A%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/","content":"删除重复数据删除的是全字段重复的数据（见练习18题）\ncreate table dept1 as select * from scott.dept; insert into dept1 select * from scott.dept; select * from dept1--方法一 delete from dept1 where rowid not in (select max(rowid) from dept1 group by deptno)--方法二 delete from dept1 where rowid not in ( \tselect rowid from ( \t\tselect dept1.*,rowid,row_number()over(partition by deptno order by deptno) r from dept1 \t\t)where r=1 )\n\n作业练习--上机练习14--1、检索“c001”课程分数小于80，按分数降序排列的同学学号select sno,score from sc where cno=&#x27;c001&#x27; and score&lt;80 order by score desc--2、查询各个课程及相应的选修人数select c.cno,c.cname,count(sc.sno) 选修人数from course c left join sc on c.cno=sc.cno group by c.cno,c.cname order by c.cno--3、按照不同老师编号分类显示课程列表，课程之间用逗号隔开select tno,listagg(cname,&#x27;，&#x27;)within group(order by cno) from course group by tno--4、查询各科成绩最高和最低的分：以如下形式显示：课程ID，最高分，最低分select cno 课程ID, max(score) 最高分, min(score) 最低分 from sc group by cno order by cno--5、查看成绩表信息，多加一列标注是否及格select sc.*,case       when score&gt;=60 then &#x27;是&#x27;       else &#x27;否&#x27;       end 是否及格from sc--6、查询出只选修了一门课程的全部学生的学号和姓名select sno,sname from student s where        (select count(*) from sc  where sc.sno=s.sno)=1order by s.sno--7、查询平均成绩大于85的所有学生的学号、姓名和平均成绩select s.sno,s.sname,avg(score) from student s join sc on(s.sno=sc.sno) group by s.sno,s.sname having avg(score)&gt;85 order by s.sno--8、统计各科成绩,各分数段人数:分数段为[100-85] a,[84-70] b,[69-60] c,[ &lt;60] dselect c.cno, c.cname,    count(case when sc.score between 85 and 100 then 1 end) a,    count(case when sc.score between 70 and 84 then 1 end) b,    count(case when sc.score between 60 and 69 then 1 end) c,    count(case when sc.score &lt; 60 then 1 end) as dfrom sc join course c on sc.cno=c.cnogroup by c.cno, c.cnameorder by c.cno--9、查询课程名称为“Oracle”，且分数低于60 的学生姓名和分数select s.sname, sc.score from student s join sc on sc.sno=s.snojoin course c on c.cno=sc.cnowhere c.cname=&#x27;Oracle&#x27; and sc.score&lt;60--10、查询所有学生的选课情况，选了多少门课程；select s.sno,s.sname,listagg(c.cname,&#x27;、&#x27;)within group(order by sc.cno) 选课,count(sc.cno) 合计from student s join sc on sc.sno=s.snojoin course c on c.cno=sc.cnogroup by s.sno,s.sname--11、统计每门课程的学生选修人数（超过1人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列select cno,count(sno) 选修人数 from sc group by cno order by 选修人数 desc, cno --12.向SC表中插入一些记录，这些记录要求符合以下条件：没有上过编号“c002”课程的同学学号、“c002”号课的平均成绩；insert into sc(sno,cno,score)select s.sno,&#x27;c002&#x27;,(select avg(score) from sc where cno=&#x27;c002&#x27;)from student swhere s.sno not in (      select sno from sc where cno=&#x27;c002&#x27;)--13、查询全部学生都选修的课程的课程号和课程名select c.cno,c.cname from course cwhere not exists( --不存在未选修某一门课      select 1 from student s where not exists(  --未选修某一门课             select 1 from sc where sc.sno=s.sno and sc.cno=c.cno --选修了某一门课      ))--14、查询没有学全所有课的同学的学号、姓名；select sno,sname from student swhere exists(      select 1 from course c where not exists(  --未选修某一门课             select 1 from sc where sc.sno=s.sno and sc.cno=c.cno --选修了某一门课      ))--15、查询“c001”课程比“c002”课程成绩高的所有学生的学号；select sc1.sno,sc1.score,sc2.score from sc sc1 join sc sc2 on sc1.sno=sc2.snowhere sc1.cno=&#x27;c001&#x27; and sc2.cno=&#x27;c002&#x27; and sc1.score&gt;sc2.score--16.将所有c001课程成绩低于平均成绩的同学的分数改为60分update  sc set score = 60 where cno=&#x27;c001&#x27; and score&lt;(        select avg(score) from sc where cno=&#x27;c001&#x27;)--17.删除学习“谌燕”老师课的SC 表记录；delete from sc where cno in(       select c.cno from course c join teacher t on c.tno=t.tno where t.tname=&#x27;谌燕&#x27;)--18.创建dept1表获取scott.dept表数据，再使用insert...select插入一次scott.dept表数据到detp1表，再使用删除语句删除重复数据create table dept1 as select * from scott.dept; --建表insert into dept1 select * from scott.dept; --插入--删除重复数据--方法一delete from dept1 where rowid not in(       select max(rowid) from dept1 group by deptno)--方法二delete from dept1 where rowid not in(       select rowid from(              select dept1.*,rowid,row_number()over(partition by deptno order by deptno) r from dept1       ) where r=1)--19、查询没学过“谌燕”老师课的同学的学号、姓名；select sno,sname from student s where not exists(       select 1 from sc        join course c on sc.cno=c.cno       join teacher t on c.tno=t.tno       where sc.sno=s.sno and t.tname=&#x27;谌燕&#x27; ) order by s.sno--20、查询学过“c001”并且也学过编号“c002”课程的同学的学号、姓名；select sno,sname from student s where exists(       select 1 from sc where sc.sno=s.sno and cno=&#x27;c001&#x27;) and exists(       select 1 from sc where sc.sno=s.sno and cno=&#x27;c002&#x27;) order by s.sno--21、查询出每个学科排名第一名的学生姓名列表,包括课程编号，学生姓名，学生成绩--子查询select sc.cno,s.sname,sc.score from sc join student s on s.sno=sc.snowhere sc.score=(      select max(score) from sc where cno=sc.cno) order by sc.cno--窗口函数with rnk as(     select sc.cno 课程编号, s.sname 学生姓名, sc.score 学生成绩,     dense_rank()over(partition by sc.cno order by sc.score desc) 排名     from sc join student s on s.sno=sc.sno)select 课程编号,学生姓名,学生成绩 from rnk where 排名=1 order by 课程编号--22、查询选修“谌燕”老师所授课程的学生中，成绩最高的学生姓名及其成绩with cy_c as( -- 获取谌燕老师教授的所有课程     select c.cno from course c      join teacher t on t.tno=c.tno     where t.tname=&#x27;谌燕&#x27; ),top_s as( -- 找出这些课程中成绩最高的学生      select sname 学生姓名, score 成绩 ,dense_rank()over(order by sc.score desc) 排名      from sc join student s on s.sno=sc.sno      where sc.cno in(select cno from cy_c))select 学生姓名,成绩 from top_s where 排名=1--23、查询学过“谌燕”老师所教的所有课的同学的学号、姓名；with cy_c as( -- 获取谌燕老师教授的所有课程     select c.cno from course c      join teacher t on t.tno=c.tno     where t.tname=&#x27;谌燕&#x27; )select s.sno 学号, s.sname 姓名from student s where not exists( -- 不存在没选修的课程-&gt;选修了全部课程     select 1 from cy_c where not exists( --没选修谌燕老师某一课程            select 1 from sc where sc.sno=s.sno and sc.cno=cy_c.cno --选修了谌燕老师某一课程     )) order by 学号--24、查询至少有一门课与学号为“s001”的同学所学相同的同学的学号和姓名with s1_c as( -- 获取s001同学的所有课程     select cno from sc where sno=&#x27;s001&#x27; )select s.sno,s.sname from student sjoin sc on sc.sno=s.snowhere sc.cno in(select * from s1_c)--25、查询和“s001”号的同学学习的课程完全相同的其他同学学号和姓名with s1_c as( -- 获取s1同学的所有课程     select cno from sc where sno=&#x27;s001&#x27; )select s.sno 学号, s.sname 姓名 from student sjoin sc on sc.sno=s.sno where s.sno!=&#x27;s001&#x27; and not exists( --不存在      select 1 from s1_c where not exists( --sc1没选             select 1 from sc where sc.sno=s.sno and sc.cno=s1_c.cno --但sc选了      )) and not exists( --不存在      select 1 from sc where sc.sno=s.sno and not exists( ---sc没选             select 1 from s1_c where s1_c.cno=sc.cno --但s1选了      )) order by s.sno"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/5.12%E6%80%BB%E7%BB%93%EF%BC%9A%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5/","content":"两种批量插入方式方法一执行以下语句-&gt;复制需要插入的数据-&gt;点击编辑数据（开锁）-&gt;移动鼠标位置使其图标变为向右–按住鼠标左键拉动-&gt;粘贴\nselect * from 表 for update\n\n方法二![[d90d4fbb3aad612bf9fffe28097db015_.png]]![[0d7ed71d558ac1ee1709e15226bbec35_.png]]![[afc2ae31166987f9f50663fd58fa3074_.png]]![[7a6ed6a666f8bd8e8b1429d1d85b1b4c_.png]]\n作业练习create table t(tno varchar2(20))insert into t values(&#x27;1,2,3&#x27;)select * from t--1.求tno这个字段的累计总和select substr(tno,1,1)+substr(tno,3,1)+substr(tno,5,1)  from t--建表shuiguocreate table shuiguo(tdate varchar2(30),tname varchar2(20),saleamount number(10))select * from shuiguo--2.查询语句，结果按梨、葡萄、西瓜、橘子、柠檬、苹果、香蕉的顺序排序，同种水果按销量降序排序   select * from shuiguo order by case tname       when &#x27;梨&#x27; then 1       when &#x27;葡萄&#x27; then 2       when &#x27;西瓜&#x27; then 3       when &#x27;橘子&#x27; then 4       when &#x27;柠檬&#x27; then 5       when &#x27;苹果&#x27; then 6       when &#x27;香蕉&#x27; then 7       else 8 end,        saleamount desc--建表emp2create table emp2(empno number(10), ename varchar2(20), dname varchar2(20), sal number(10), e_date date)select * from emp2--3.查询出每个部门中，连续三个月工资都增长的员工信息，包括员工姓名、部门名称和连续增长的月份。 要求查询的结果格式：部门名称，员工姓名，连续增长月份with tmp as(     select dname 部门名称, ename 员工姓名, count(*) 连续增长月份 from( --连续增长的月份         select tmp1.*,lag(row_num,1,row_num-1)over(partition by ename order by ename,e_date,e_date) last_row_num from( --增长的月份                select emp2.*, -- 偏移、编号                       lag(sal,1,null)over(partition by ename order by ename,e_date) last_sal,                       row_number()over(partition by ename order by ename) row_num                from emp2         ) tmp1 where sal-last_sal&gt;0     ) where row_num-last_row_num=1 group by dname,ename)select * from tmp where 连续增长月份&gt;=3"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/5.13%E6%80%BB%E7%BB%93%20%E7%B4%A2%E5%BC%95/","content":"索引的目的是加速查询的速度：原则上一个列最多只能建两个索引索引建完自动生效，不改变语法书写格式\n索引创建索引create (unique/BITMAP) index 索引名称 on 表名(列名) tablespace 表空间名； --unique 用于指定是否强制要求索引列为唯一性数据，表空间可选择是否指定，不指定则用默认表空间。出于性能考虑索引表空间和表的表空间要分开。\n索引分类一、按存储形式分类\nb_tree索引\n位图索引\n基于函数索引\n方向键索引\n\nB-TREE索引适用场景：列基数比较大的时候使用（行业、身高）列基数：该列不重复数据的个数 count(distinct col)\ncreate index ind_name on tb_name(col_name)\n\n位图索引说明：位图索引在创建时，会扫描整张表，为索引列的每个取值建立一个不重复的位图 （BITMAP）来描述该取值适用场景：列基数比较小的时候使用（性别、婚姻状况）\ncreate bitmap index ind_name on tb_name(col_name); create bitmap index ind_student54_sex on student_54_new(sex)\n反向键索引说明：可以视作一种特殊的B-TREE索引，存储索引列的反向值背景：为防止B-TREE索引在某叶上数据量占比过高而使用的一种索引适用场景：原始数据分支不明显但反向数据分支明显的列（身高：集中在一米七一米八）\ncreate index ind_name on tb_name(col_name) reverse\n基于函数的索引说明：可以视作一种特殊的B-TREE索引，存储函数处理后的数据背景：在某个字段上以原值建立了索引，但是在筛选时在该字段上经常加函数，导致索引无法生效适用场景：对某列进行筛选时经常需要配合函数使用（例如查找姓名中的首字母）\ncreate index ind_name on tb_name(function(col_name));\n\n二、按唯一性分类唯一索引索引列中不可能出现重复值\ncreate unique index ind_name on tb_name(col_name)\n\nB-TREE索引可以建立唯一索引，位图索引不能建立唯一索引\n如果在某列上建立了唯一约束或主键约束，ORACLE会自动在该列上建立一个同名的唯一索引\n\n非唯一索引create index ind_name on tb_name(col_name);\n\n三、按列的个数分类（索引覆盖的列的个数）单列索引基于一个列建立的索引\ncreate index ind_name on tb_name(col_name)\n复合索引（联合索引）基于两个或两个以上列建立的索引\n--写在前面的字段（ename）且叫为主键列，触发索引需要用到主键列，与主键列的位置没有关系create index ind_emp_enamejob on emp(ename,job)\n\n修改索引名称alter index 索引名 rename to 新索引名；\n\n删除索引通过drop index 索引名\n索引建立或使用的规则与建议1.如果对某大表进行筛选时，某列或某几列频繁出现在WHERE子句中，并且检索出的数 据低于总行数的15%（50%），应考虑在这些列上建立索引。2.如果对某大表进行排序时，某列或某几列频繁出现在ORDER BY子句中，应考虑在这些 列上建立索引。3.小表不要建立索引。4.对于含有空值的列，如果经常在查询时查询非空值，建议在该列上建立索引；如果经 常在查询时查询空值，建议在该列上建立基于函数的索引。5.为了提高表连接的性能，应在连接列上建立索引（建立一般普通的索引即可）6.索引是数据库的一种实体对象，级别类似于表，会占用内存空间，ORACLE会自动进行 索引维护，表和索引可以建立在不同的表空间。7.通过索引可以提升数据的查询速度，但是会相对地降低DML语句的操作速度，尤其是 插和改的速度，ORACLE会花费时间在索引维护上，所以说要把握好索引的数量8.对于列基数比较大的列，适合B-TREE索引，列基数比较小的列，适合位图索引。9.对于复合索引，至少要引用到索引列中的第一个列才会使用该索引。10.某列可以出现在多个索引中，但相同的某列或某几列无法多次建立索引。 –就是可以 有多个组合，但不能有重复组合，不同顺序的相同几列视为不同组合11.索引建立后并不一定会被引用，ORACLE会分析整个SQL后做出最优的执行方式。12.ORACLE会自动在主键约束和唯一约束列上建立唯一索引。13.对于一般的B-TREE索引，通配符出现在搜索词的首位时不会引用索引14.在索引列上使用&lt;&gt; !&#x3D;号时，或对空值进行判断时，索引不会生效15.rebiuld重建索引，减少碎片，提高效率。\n索引的优缺点优点1.大大加快数据的检索速度;2.创建唯一性索引，保证数据库表中每一行数据的唯一性;3.加速表和表之间的连接;4.在使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。\n缺点1.索引需要占物理空间。2.当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的 维护速度。\nSQL性能优化问题SQL执行顺序from—where—group by—having—select—order by From后面的表执行顺序从右往左，从后往前1、 如果结果集没有影响的关联，将小的表放在后面2、 Where条件顺序，将过滤条数大的放在后面，过滤条数小的放在前面3、 尽量减少对表的重复查询4、 使用exists代替in：in后面用子查询，用exists代替in（看exists子查询中where条件， 结果返回true或者fasle），如果in后面是具体的值，还是用in，用in的SQL语句总是多了 一种转换过程5、 Distict,查询效率低，要先排序，再去重6、 索引正确使用，不能使用聚合函数，不能使用not7、 大于等于效率要高于大于，用&gt;&#x3D;替代&gt;，前提是整数相比较8、 Like效率低，使用instr代替instr(name,’n’)&gt;&#x3D;1可以代替like‘%c%’9、 Where 是过滤行，having对分组的过滤10、 要查看执行计划(F5, EXPLAIN )11、 对 WHERE + ORDER BY 组合的优化, 在where 进行限制后 在进行 order BY12、 尽量少排序 ORDER BY13、 任何地方都不要使用select * from表，用具体的字段列表代替“*”，不要返回用不到 的任何字段14、 尽量用 JOIN 替换子查询15、 尽量少使用 OR ,索引失效16、 尽量避免 UNION 使用 UNION ALL 然后再 GROUP BY 去重17、 尽早过滤数据, WHERE 过滤 使用 join时 先过滤再 JOIN18、 尽量避免一条 UPDATE 更新多条记录, 用 MERGE INTO , 效率比 UPDATE 高\n作业练习--1.给emp表的ename列创建一个索引，建立索引前后时间对比select * from emp where ename like &#x27;S%&#x27;create index idx_emp_ename on emp(ename);select * from emp where ename like &#x27;S%&#x27;--2.创建job和sal的复合索引，查询工资大于2000的MANAGER员工信息create index idx_emp_jobsal on emp(job,sal)select * from emp where sal&gt;2000--3.查询所有人选修c002课程及格的情况,自己判断如何创建索引--在sc表的cno和score字段上创建复合索引create index idx_sc_sccno on sc(cno,score)select sc.*,case when score&gt;=60 then &#x27;及格&#x27; else &#x27;不及格&#x27; end 及格情况 from sc where cno=&#x27;c002&#x27; --4.使用小写函数来创建索引，查询带有m的员工信息create index idx_emp_ename on emp(lower(ename))select * from emp where ename like &#x27;m%&#x27;--5.修改删除一个索引alter index idx_emp_ename rename to ind_emp_ename1；--修改drop index ind_emp_ename1 --删除"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/4.30%E6%80%BB%E7%BB%93%EF%BC%9A%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%81%E6%93%8D%E4%BD%9C%E7%AC%A6/","content":"增删改查结构：增create 删drop 改alter 查select数据：增insert 删delete 改update 查select\nalter table 能够实现的功能alter都是基于表去修改\n1.新增列\nalter table 表名 add 列名 类型(长度)[约束&amp;默认值]; alter table student add City varchar2(20) not null;\n2.修改列\nalter table 表名 modify 列名 类型 [约束 默认值]; --修改表中的列 alter table student modify City varchar(300) unique not null; alter table 表名 modify 列名 类型 null; --去掉列的非空约束 alter table 表名 modify 列名 类型 not null; --给列添加非空约束 alter table cjb modify xingming null\n3.删除列\nalter table 表名 drop column 列名; --删除表中的列 alter table student drop column sname \n4.新的列定义默认值 \nalter table student modify city default &#x27;北京&#x27;; \n5.重命名列 \nalter table 表名 rename column 旧列名 to 新列名; \n6.将表更改为只读状态\nalter table 表名 READ ONLY; --改为只读状态alter table 表名 READ WRITE; --改回可编辑模式\n7.添加约束 \nalter table 表名 add 表级约束语法; --给表添加表级约束 --alter table 表名 add constraint 约束名 约束类型(列名)alter table bm2 add constraint bm2_zjys primary key(deptno);alter table emp add constraint FK_DEPTNO foreign key (deptno) references DEPT (DEPTNO); alter table emp add constraint CK_sal check sal (sal&gt;800) --因非空约束不能使用表级约束语法，故添加非空约束需使用modify：alter table bm2 modify loc varchar2(20) not null;\n8.删除约束 \nalter table 表名 drop constraint 约束名; --删除一个约束alter table bm2 drop constraint BM2_ZJYS\n\n\ninsert 数据插入\n格式一：指定列插入数据，使用前提是不被插入的列可为空\n\ninsert into bm3(deptno,loc) values(50,&#x27;七星区&#x27;);insert into bm3(deptno,dname,loc) values(60,&#x27;a&#x27;,&#x27;a&#x27;)\n\n\n格式二：不指定列插入，默认所有列都需要值，如遇到不插入数据的列则用null值填充\n\ninsert into bm3 values(70,&#x27;t&#x27;,null);\n\n格式三：只插入select查询结果集的数据,注意查询的结果集结构要保证和表结构一致\n\ninsert into bm3(deptno,dname) select deptno,dname from scott.deptinsert into bm3 select 20,&#x27;z&#x27;,&#x27;z&#x27; from dualinsert into bm3 select deptno,ename,job from scott.emp\n\nupdate 修改update bm3 set deptno=80 where deptno=60update bm3 set dname=&#x27;销售部门&#x27;,loc=&#x27;八星区&#x27; where deptno=80 --修改多项数据，逗号隔开--把WARD的工资改成和SMITH一样update yg2 set sal=(select sal from yg2 where ename=&#x27;SMITH&#x27;) where ename=&#x27;WARD&#x27;\n\ndelete 删除的是数据delete、insert只能以行为单位进行操作\ndelete from yg2 where empno=7369alter table yg2 drop column deptnodelete from yg2 where sal&gt;(select sal from yg2 where empno=7499)--删除表数据 DDL结构上的不能回滚 DML数据上的能回滚drop table yg2--删除结构和数据，不能回滚truncate table yg2--删除数据,不能回滚delete from yg2 --删除数据，能回滚\n速度：drop&gt;truncate&gt;delete\nmerge 融合备份还原（仅一张表）根据与源表联接的结果，对目标表执行插入、更新或删除操作。例如，根据在另一个表中找到的差异在一个表中插入、更新或删除行，可以对两个表进行同步。merge也是数据上的属于DML\nmerge into 目标表Using 备份表（源表）On (values=values) When matched then update 和 delete When not matched then insert--用源表sc1对目标表sc进行更新 merge into sc --目标表（需要更新的表）using sc1 --源表（备份表）on(sc.sno=sc1.sno and sc.cno=sc1.cno)when matched then update set sc.score=sc1.score--有值的时候去做更新when not matched then insert values(sc1.sno,sc1.cno,sc1.score)--没值的时候直接插入merge into table1using table2on(table1.id=table2.id)when matched then update set table1.setup_date=table2.setup_dateupdate set table1.mature_date=table2.mature_datewhen not matched then insert values(table2.setup_date,table2.mature_date)\nupdate和delete同时带有where时，delete相当于继承上面的where条件再执行delete后面的条件\n操作符\n算术操作符：+ - * &#x2F; （加减乘除）一般用与数字类型的运算，和日期加减运算\n连接操作符: || (把多个列合并成一个列)\n逻辑操作符: and、or、not (与、或、非)一般用于多个条件判断式的连接优先级：not&gt;and&gt;or (可用小括号改变优先级)\n\n--not 取反离自己最近的那个条件判断式select * from emp where not sal&gt;2000 or deptno=20 and job=&#x27;MANAGER&#x27;\n\n比较操作符：&gt;、 &gt;&#x3D;、 &lt;、 &lt;&#x3D;、 &#x3D;、 !&#x3D; 、 &lt;&gt; 、any、all、between..and..、like、in、is null（都是放在where后面做条件比较）\n\nselect * from emp where sal&gt;3000--数字的大于不包含本身select * from emp where ename&gt;&#x27;C&#x27;--字符的大于包含本身（比的是数据的首字母A..Z）--any：只需满足与括号内任一内容比较的条件（大于最小值，小于最大值）select * from emp where sal&gt;any(select sal from emp where deptno=20) --求工资大于20号部门任一工资的员工数据--all：必须满足与括号内所有内容比较的条件（大于最大值，小于最小值）select * from emp where sal&gt;all(select sal from emp where deptno=20) --求工资大于所有20号部门的工资的员工数据--in：筛选出括号内的内容，功能相当于 =anyselect * from sc where sno in(&#x27;s001&#x27;,&#x27;s002&#x27;)--is null:判断为空值 select * from emp where comm is nullselect * from emp where comm is not null --非空--between..and..包含边界值，边界值得从小到大select * from emp where sal between 950 and 3000\nlike 模糊搜索在where子句中使用like关键字查询数据的方式也称为字符串模式匹配或字符串模糊查询，like关键字需要使用通配符在字符串内查找指定的模式，所以要了解常用的通配符。Like关键字可以使用以下两个通配符：\n\n%：代表0或者多个字符 \n_：代表一个且只能是一个字符例如：“k%”代表以k开头的任意长度的字符串；“%k”代表以k结尾的任意长度的字符串；“%k%”代表含有k字母的任意长度的字符串；“_kk”代表3个字符长度且后面2个字符是kk的字符串要查询的字符串中含有“%”或“”时，可以使用转义（escape）关键字实现：\n\nselect * from EMP where ename like &#x27;%\\_%&#x27; escape &#x27;\\&#x27;;\n上述查询语句中使用了”\\”为转义字符，即在“\\”之后的“_”字符已不是通配符，而是他本来的含义，即下划线。因此该查询的结果为：含有“_”，任意长度字符的字符串。以上规则可复合使用（见练习17-20）\n上机练习5--学生管理系统--1.将c002课程的成绩增加5分update sc set score=score+5 where cno=&#x27;c002&#x27; --2.将c001课程成绩小于80分的同学的成绩增加10分update sc set score=score+10 where cno=&#x27;c001&#x27; and score&lt;80--3.增加一个学生:学号&#x27;s013&#x27;，姓名：&#x27;王麻子&#x27;，年龄：28，性别：男insert into student values(&#x27;s013&#x27;,&#x27;王麻子&#x27;,28,&#x27;男&#x27;)--4.创建一张和sc表相同的表，并将s001和s002学生的选课信息插入新表中create table sc1 asselect * from sc where sno=&#x27;s001&#x27; or sno=&#x27;s002&#x27;--5.将所有c001课程成绩不及格的同学的分数改为60分update sc set score=60 where cno=&#x27;c001&#x27; and score&lt;60--6.删除“s002”同学的“c001”课程的信息记录delete from sc where sno=&#x27;s002&#x27; and cno=&#x27;c001&#x27;--重新插入“s002”同学的“c001”课程的信息记录insert into sc values(&#x27;s002&#x27;,&#x27;c001&#x27;,80.90);--7.用sc1去更新sc，当学生和选修课程相同的时候，把sc1的分数更新到sc，不同的时候就插入到sc merge into sc using sc1 on(sc.sno=sc1.sno and sc.cno=sc1.cno) when matched then update set sc.score=sc1.score when not matched then insert values(sc1.sno,sc1.cno,sc1.score)  --操作符练习 --1.查询名字是BLAKE的人的编号,名字,工资select empno,ename,sal from emp where ename=&#x27;BLAKE&#x27;--2.查询编号是7782的员工的编号,名字,工资,奖金select empno,ename,sal,comm from emp where empno=7782--3.查询职位是销售(SALESMAN)的人的名字,职位,入职日期select ename,job,hiredate from emp where job=&#x27;SALESMAN&#x27;--4.查询部门是10的人的编号,名字,部门编号select empno,ename,deptno from emp where deptno=10 --5.查询工资大于1500,并且小于2500的人的编号,名字,工资select empno,ename,sal from emp where sal&gt;1500 and sal&lt;2500--6.查询工资小于2000的人的名字,工资,奖金select ename,sal,comm from emp where sal&lt;2000--7.求工作是CLERK的或者工资小于2000员工姓名,工作,工资select ename,job,sal from emp where job=&#x27;CLERK&#x27; or sal&lt;2000--8.求工资小于800或者大于1500的员工姓名,工作,工资select ename,job,sal from emp where sal&lt;800 or sal&gt;1500--9.求工作是CLERK,并且工资小于950或者大于1500的员工姓名,工作,工资select ename,job,sal from emp where job=&#x27;CLERK&#x27; and (sal&lt;950 or sal&gt;1500)--10.求10号部门工资大于1000和20号部门工资大于1500的员工姓名 select ename from emp where deptno=10 and sal&gt;1000 or deptno=20 and sal&gt;1500 --11.求工资在1500到2000之间的员工姓名select ename from emp where sal between 1500 and 2000--12.求部门编号是10号，20号，30号中任意一个部门的员工姓名select ename from emp where deptno in(10,20,30)--13.求姓名中包含&#x27;M&#x27;的员工姓名select ename from emp where ename like &#x27;%M%&#x27;--14.求员工姓名第二位是&#x27;M&#x27;的员工姓名 select ename from emp where ename like &#x27;_M%&#x27;--15.求姓名中包含A和L的姓名 select ename from emp where ename like &#x27;%A%&#x27; and ename like &#x27;%L%&#x27; --16.求姓名是五位的员工信息select  * from emp where ename like &#x27;_____&#x27;--17.求姓名中第3位是%的员工姓名select ename from emp where ename like &#x27;__\\%%&#x27; escape &#x27;\\\\&#x27;--18.求第一位是_,倒数第二位也是_的员工姓名select ename from emp where ename like &#x27;\\_%&#x27; and ename like &#x27;%\\__&#x27; escape &#x27;\\ &#x27;--19.求以_开头,第三位也是下划线_,第六位是%的员工姓名select ename from emp where ename like &#x27;\\__\\___\\%%&#x27; escape &#x27;\\ &#x27;--20.求名字中不包含M的员工姓名select ename from emp where ename not like &#x27;%M%&#x27;"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/5.6%E6%80%BB%E7%BB%93%EF%BC%9A%E6%8E%92%E5%BA%8F%E3%80%81%E5%88%86%E7%BB%84/","content":"关键词相关关键词一共6个，一条查询语句最少要有2个关键词，最多6个关键词，每个关键词只能出现一次\n\nselect 选列\nfrom 选表\nwhere 选行\ngroup by 分组\nhaving 选分组后的行\norder by 排序\n\n书写顺序：select — from — where — group by — having — order by执行顺序：from — where — group by — having — select — order by\n排序 order byasc 升序（从小到大），默认，可写可不写；desc 降序（从大到小），需在列名后标注\nselect * from emp order by sal --升序select * from emp order by sal desc --降序\n\norder by 是唯一一个可以使用别名的关键词 \nselect sal 工资, deptno 部门 from emp order by 工资 desc\n\n排序后空值最大（升序排序时空值在最下面）\nselect * from emp order by comm desc\n\ndesc不共用（每列默认升序，需逐个设置）多个列进行排序时，先全按照左边的列进行排序，在左边列排完的基础上，再排右边列\n--先按部门升序排序，再按工资降序排序select * from emp order by deptno, sal desc--两者都需降序排序时需要都写出descselect * from emp order by deptno desc, sal desc\n\n数字指代能用但不常用\nselect deptno,ename,sal from emp order by 1,3 desc\n\n分组 group by单独使用时效果相当于去重，一般只搭配聚合函数一起使用\n--两者结果一样select distinct deptno from emp --去重select deptno from emp group by deptno  --分组\n分组后select后面只能跟分了组的列和聚合函数\n聚合函数多行聚合成一行的函数，如：最大值max() 最小值min() 求和sum() 平均值avg() 计数count()\nselect max(sal),min(sal),sum(sal),avg(sal),count(1) from emp\ncount求的就是结果集里面有多少条有效数据（空值不计），可使用count(1)或者count(*)来求所有数据的计数\n--求每个部门的最高工资select deptno,max(sal) from emp group by deptno--每个部门有几个工作为MANAGER的员工select  deptno,count(1) from emp where job=&#x27;MANAGER&#x27; group by deptno--可进行多项分组select deptno,job,avg(sal),count(1),sum(sal) from emp group by deptno,job\n有分组的查询语句，那么聚合函数则在分组后产生\nhaving功能等同where：专门用于筛选聚合函数与where的区别：\n\nwhere是用来过滤行的，having是用来过滤分组的 \nhaving一般跟在group by子句后\nwhere是在分组前进行过滤，而having是在分组后进行过滤\nwhere后面不可以加聚合函数过滤条件，having可以\nwhere效率比having高，因此只有出现聚合函数作为过滤条件时用having，其余所有情况都用where\n\nwhere条件里为什么不能有聚合函数：聚合函数是对行组进行计算，而执行顺序上是先where对单个行进行过滤，才分组，两者有个先后关系。\n--求人数大于4的部门的名称和人数select  deptno,count(1) from emp  group by deptno having count(1)&gt;4 \n\nhaving 只能筛选聚合函数和分组后的列\n--求各部门工作是销售的员工人数--错误写法：没有对job进行分组，having无法对job进行筛选select deptno,count(1) from emp group by deptno having job=&#x27;SALESMAN&#x27;--正确写法：使用where进行筛选select deptno,count(1) from emp where job=&#x27;SALESMAN&#x27; group by deptno\n\n作业练习--1.查询员工姓名、工资，按照工资的正序排列select enmae,sal from emp order by sal--2.查询员工信息，先按照部门编号降序排列，再按照工资的正序排列select * from emp order by deptno desc, sal--3.查询员工信息，先按照工资降序排列，再按照部门降序排列select * from emp order by sal desc, deptno desc--4.求每个部门有多少员工select deptno, count(1)  from emp group by deptno--5.求每个部门里的最高工资select deptno, max(sal) from emp group by deptno--6.参加每种工作的人数select job, count(1) from emp group by job--7.求员工里面的最高工资select max(sal) from emp--8.求公司有多少个部门--使用dept表select count(1) from dept--使用emp表进行子查询，缺点：若emp表中没有某部门数据，则会少算这一部门，可能计数不全select count(1) from (select distinct deptno from emp)--9.求部门平均工资大于1600的部门编号select deptno from emp group by deptno having avg(sal)&gt;1600--10.求部门平均工资大于1600,并且不是20号部门的部门编号select deptno from emp where deptno!=20 group by deptno having avg(sal)&gt;1600--11.列出最低薪金大于1500的各种工作select job from emp group by job having min(sal)&gt;1500--12.列出在每个部门工作的员工数量、平均工资select deptno,count(1), avg(sal) from emp group by deptno--13.列出各个部门的MANAGER（经理）的最低薪金select deptno,min(sal) from emp where job=&#x27;MANAGER&#x27; group by deptno--14.查询每个部门每个岗位的工资总和。select deptno, job, sum(sal) from emp group by deptno, job order by deptno--15.查询部门人数大于2的部门编号，最低工资、最高工资,部门人数。select deptno,min(sal),max(sal),count(1) from emp group by deptno having count(1)&gt;2--16.查询部门平均工资大于2000，且人数大于2的 部门编号、部门人数、部门平均工资 ，并按照部门人数升序排序。select deptno,count(1),avg(sal) from emp group by deptno having avg(sal)&gt;2000 and count(1)&gt;2 order by count(1)--17.查询员工岗位中不是以“SA”开头并且平均工资在2500元以上的岗位及平均工资，并按平均工资降序排序select job,avg(sal) from emp where job not like &#x27;SA%&#x27; group by job having avg(sal)&gt;2500 order by avg(sal) desc--18.查询岗位不为SALESMAN，工资和大于等于2500的岗位及 每种岗位的工资和select job,sum(sal) from emp where job!=&#x27;SALESMAN&#x27; group by job having sum(sal)&gt;=2500--19.写一个查询，显示每个部门最高工资和最低工资的差额select deptno,max(sal)-min(sal) from emp group by deptno\n\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5SQL/5.7%E6%80%BB%E7%BB%93%EF%BC%9A%E5%87%BD%E6%95%B0/","content":"函数SQL 函数会对传递进来的参数进行处理，并返回一个处理结果，也就是返回一个值。通常用于返回特定的数据，可以很方便地转换和处理数据，Oracle 数据库中主要使用两种类型的函数： \n\n单行函数：对每一个函数应用在表的记录中时，只能输入一行结果，返回一个结果，有：\n字符函数：对字符串操作。数字函数：对数字进行计算，返回一个数字。转换函数：可以将一种数据类型转换为另外一种数据类型。日期函数：对日期和时间进行处理。 \n\n\n聚合函数：聚合函数同时可以对多行数据进行操作，并返回一个结果。\n\n自定义函数--加法计算器 输入两个数 返回一个和 create function getSum(n1 in number,n2 in number) return number as he number(4); begin he:=n1+n2; return he; end; select getSum(3,5) from dual 102 select empno,deptno,sal,comm,getSum(empno,deptno) from emp\n\n字符函数length 计算字符串长度length 不区分中英文lengthb 区分中英文\nupper 和 lower 大&#x2F;小写转换concat 连接字符串只能连接两个字符\nlpad 和 rpad 左&#x2F;右填充-- 对原始字符串str向左填充指定字符（str_p，可不填，默认空格），直到字符串达到n个lpad(str,len,str_p)-- 对ABC向左填充*直到变为5个字符，结果为&#x27;**ABC&#x27;select lpad(&#x27;ABC&#x27;,5,&#x27;*&#x27;) from dual-- str_p不填时默认填充空格，结果为&#x27;  ABC&#x27;select lpad(&#x27;ABC&#x27;,5) from dual-- 若len小于原始字符，则改为保留左侧len个字符select lpad(&#x27;ABC&#x27;,2) from dual -- 结果为AB-- 向右填充，同理rpad(str,len,str_p)-- 对ABC向右填充o直到变为6个字符，结果为&#x27;ABCooo&#x27;select rpad(&#x27;ABC&#x27;,6,&#x27;o&#x27;) from dual-- 若len小于原始字符，依然改为保留左侧len个字符select rpad(&#x27;ABC&#x27;,2) from dual -- 结果为AB\ninstr 找字符串出现位置效率比like高\n-- 从字符串str1中找str2，从第start个字符开始找,找第n次出现的位instr(str1,str2,start,n) -- strat和n可不填，默认为1-- 从头开始找第2个A出现的位置，结果为5select instr(&#x27;BABBABAB&#x27;,&#x27;A&#x27;,1,2) from dual-- 当start为负时，从倒数第start位往前找-- 从倒数第3位找第1个A出现的位置，结果为5select instr(&#x27;BABBABAB&#x27;,&#x27;A&#x27;,-3) from dual-- 找出名字含T的的员工名字select ename from emp where instr(ename,&#x27;T&#x27;)&gt;0\n\nsubstr 截取字符串-- 对字符串str截取，从第start个字符开始，截取len个字符，返回值是一个字符串substr(str,start,len) -- len可不填，默认截完-- 从第2个字符开始截取3个字符，结果为BCDselect substr(&#x27;ABCDEF&#x27;,2,3) from dual\n\ntrunc 截断数字截断：截断数字到指定的小数位数-- num:要截断的数字； n：要保留的小数位trunc(num,n)-- n为正数时，截断到n位小数，结果为123.45select trunc(123.4567,2) from dual-- n不填时默认为0，即仅保留整数部分，结果为123select trunc(123.4567) from dual-- n为负数时，截断将小数点左边n位置0，结果: 120select trunc(123.4567, -1) from dual\n\n日期截断：将时间设置为当天开始的时间（00:00:00）-- 当天 2025/5/7，只显示日期，不显示时间select trunc(sysdate) from dual-- 当前月份的第一天 2025/5/1select trunc(sysdate,&#x27;month&#x27;) from dual-- 当前年份的第一天 2025/1/1select trunc(sysdate,&#x27;year&#x27;) from dual\nreplace 替换字符串--将字符串str中的字符s替换成字符dreplace(str,s,d)--显示所有员工的姓名，将字符&#x27;A&#x27;替换为&#x27;ai&#x27;select replace(ename,&#x27;A&#x27;,&#x27;ai&#x27;) from emp--d可不填，默认为空，即相当于删除字符&#x27;A&#x27;select replace(ename,&#x27;A&#x27;) from emp--脱敏（脱除敏感数据）\ntranslate 替换字符串-- 将字符串str中的from替换为to（其中from和to是逐个字符一一对应关系）translate(str,from,to)-- 简单字符替换，结果为&#x27;a234b&#x27; (1→a, 5→b)select translate(&#x27;12345&#x27;,&#x27;15&#x27;,&#x27;ab&#x27;) from dual--字符删除,结果为&#x27;He Wrd&#x27; (l和o被删除)select translate(&#x27;Hello World&#x27;,&#x27;lo&#x27;,&#x27;&#x27;) from dual--加密转换 (字母表反向映射)select translate(&#x27;SECRET&#x27;,&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;,&#x27;ZYXWVUTSRQPONMLKJIHGFEDCBA&#x27;) from dual\n\n数字函数取整-- num为要取整的数字，n为精度，可不填，默认为0，即取整数-- n为正数时取小数点之后n位，为负数时则为小数点之前round(num,n) 四舍五入floor(num,n) 向下取整ceil(num,n) 向上取整\n\n运算mod(num1,num2) 取num1/num2的余数power(n,m) 求n的m次幂sqrt(num) 返回num的平方根\n转换函数隐式转换：指Oracle在执行SQL语句时自动将数据类型转换成需要的数据类型。隐式转换可能会 导致精度损失或数据不准确，因此在使用时需要谨慎。\n显示转换：指在SQL语句中使用一些函数强制将某个数据类型转换成另一个数据类型，如：\nto_number 字符转换为数字 -- 正常情况下数字可以自信隐式转换，不是数字的不能使用to_number转换，结论就是一般情况不用select * from emp where empno=to_number(&#x27;7499&#x27;) --数字转换的前提是看起来像数字to_date 字符类型按一定格式转化为日期类型 -- 跟日期有关的不管是日期转字符还是字符转日期都必须带日期格式select * from emp where hiredate=to_date(1981,&#x27;yyyy&#x27;)to_char 数字转化为字符to_char 日期转化为字符,必须加单引号,并且区分大小写-- to_char的其他用法Select to_char(sysdate,&#x27;ss&#x27;) from dual 取当前时间秒部分Select to_char(sysdate,&#x27;mi&#x27;) from dual 取当前时间分钟部分 Select to_char(sysdate,&#x27;HH24&#x27;) from dual 取当前时间小时部分 Select to_char(sysdate,&#x27;DD&#x27;) from dual 取当前时间日期部分 Select to_char(sysdate,&#x27;MM&#x27;) from dual 取当前时间月部分 Select to_char(sysdate,&#x27;YYYY&#x27;) from dual 取当前时间年部分 Select to_char(sysdate,&#x27;w&#x27;) from dual 取当前时间是一个月中的第几周(从1日开始算) Select to_char(sysdate,&#x27;ww&#x27;) from dual 取当前时间是一年中的第几周（从1.1开始算） Select to_char(sysdate,&#x27;iw&#x27;) from dual 取当前时间是一年中的第几周（按实际日历的） Select to_char(sysdate,&#x27;d&#x27;) from dual 取当前时间是一周的第几天，从星期天开始，周六结束 Select to_char(sysdate,&#x27;day&#x27;) from dual 取当前日是星期几，和数据库设置的字符集有关，会输出&#x27;Tuesday&#x27;或星期几 Select to_char(sysdate,&#x27;ddd&#x27;) from dual 当前日是一年中的第几天\n\n日期函数last_day(日期)：取当前日期月的最后一天next_day(sysdate,n)：取离自己日期最近的一个周（下周） 的第几天，假如本周还未过到这一天，那么求的就是本周对应的天数--下下周select next_day(next_day(sysdate,2),2) from dualadd_months(日期,月)：给一个日期加上若干个月--加一年select add_months(sysdate,12) from dualmonths_between(date1,date2)：取两个日期相差的月数\n\nnvl 空值替换-- 若exp1为空，返回exp2，否则返回exp1（主要两者类型要一致）nvl(exp1,exp2)-- 若exp1不为空，返回exp2，若exp2为空，返回exp3-- exp2和exp3类型不同的话，exp3会转换为exp2的类型nvl2(exp1,exp2,exp3)\n\n\n\n\n作业练习--上机练习7--1.求姓名为SMITH的员工的工作名称长度select length(job) from emp where ename=&#x27;SMITH&#x27;--2.求名字长度为6的员工姓名，编号select ename,empno from emp where length(ename)=6--3.求员工的工资，格式如：姓名是：SMITH,工资是：800select &#x27;姓名是：&#x27; || ename || &#x27;，工资是：&#x27; || sal from emp--4.找出emp表中员工名字包含T字母的员工select ename from emp where ename like &#x27;%T%&#x27;--5.找出emp表里名字第4位之后含T字母的员工select ename from emp where ename like &#x27;____%T%&#x27;--6.找出emp表里名字倒数第3位之前含M字母的员工select ename from emp where ename like &#x27;%M%___&#x27;--7.求第五位是H的员工姓名select ename from emp where ename like &#x27;____H%&#x27;--8.求姓名中带有三个L的姓名select ename from emp where ename like &#x27;%LLL%&#x27;--9.将员工姓名首字母大写，其余字母小写select initcap(ename) from emp--10.将员工姓名首字母小写，其余字母大写select lower(substr(ename,1,1)) || upper(substr(ename,2)) from emp--11.查询工资是偶数的员工select ename,sal from emp where mod(sal,2)=0--12.求1981年2月20号入职的员工select ename,hiredate from emp where hiredate = date &#x27;1981-02-20&#x27;--13.求1981年入职的员工select ename,hiredate from emp where to_char(hiredate,&#x27;yyyy&#x27;)=&#x27;1981&#x27;--14.求2月份入职的员工select ename,hiredate from emp where to_char(hiredate,&#x27;mm&#x27;)=&#x27;02&#x27;--15.取当前月倒数第5天入职的员工select ename,hiredate from emp where to_char(hiredate,&#x27;yyyy-mm-dd&#x27;)= to_char(last_day(sysdate)-4,&#x27;yyyy-mm-dd&#x27;)--16.取每个月倒数第5天入职的员工select ename,hiredate from emp where to_char(hiredate,&#x27;dd&#x27;)= to_char(last_day(hiredate)-4,&#x27;dd&#x27;)--17.求下下个周三的日期select next_day(sysdate,4)+7 from dual--18.求3个月后的今天select add_months(sysdate,3) from dual--19.求每个员工的月收入select ename,sal from emp--20.如果comm为空就显示“No Commission”，如果不为空就显示comm的值select nvl(to_char(comm),&#x27;No Commission&#x27;) from emp--21.求员工的一年的总收入（工资和佣金）select sal*12+nvl(comm,0) 总薪资 from emp--进阶额外40题--1、使用concat 函数完成 &quot;我是***,我的工作是***&quot; select concat(concat(&#x27;我是&#x27;,ename),concat(&#x27;我的工作是&#x27;,job)) from emp--2、对emp  ename字段首字母进行大写select initcap(ename) from emp--3、使用函数 求所有人员姓名的大写 首字母大写 小写 以及姓名字符长度 initcap（），upper（），lower（），length（）select upper(ename),initcap(ename),lower(ename),length(ename) from emp--3、从EMP表中获取job下所有职业名【distinct】（进阶需求：将工作名称都替换成中文case when）select distinct case       when job = &#x27;CLERK&#x27; then &#x27;职员&#x27;       when job = &#x27;SALESMAN&#x27; then &#x27;销售&#x27;       when job = &#x27;PRESIDENT&#x27; then &#x27;董事&#x27;       when job = &#x27;MANAGER&#x27; then &#x27;经理&#x27;       when job = &#x27;ANALYST&#x27; then &#x27;分析&#x27;       else &#x27;其他&#x27;       end 职业from emp--4.instr()求ename字段 A字母位置 select ename,instr(ename,&#x27;A&#x27;) from emp--5.显示所有员工的姓名，用“ai”替换所有“A”select replace(ename,&#x27;A&#x27;,&#x27;ai&#x27;) from emp--6.以首字母小写后面大写方式显示所有员工姓名。select lower(substr(ename,1,1)) || upper(substr(ename,2)) from emp--7.查询员工姓名的第三个字母是A的员工姓名 select ename from emp where ename like &#x27;__A%&#x27;--8.显示正好为5个字符的员工的姓名。select ename from emp where ename like &#x27;_____&#x27;--9.求所有ename带‘L’的员工，并以L为界将L前的字母大写，之后的字母小写。select upper(substr(ename,1,instr(ename,&#x27;L&#x27;)-1)) || &#x27;L&#x27; || lower(substr(ename,instr(ename,&#x27;L&#x27;)+1))from emp where ename like &#x27;%L%&#x27;--10.对所有ename用空格进行长度补齐，左右两边的空格数大致相同，使其统一长度为15，（对该列数据进行去空格操作）。select rpad(lpad(ename,length(ename)+ceil((15-length(ename))/2)),15) 姓名 from emp --11.在所有的名字中间使用‘+’进行补齐至18位（奇数名使用数字函数round（）将位数取整）select ename,substr(ename,1,length(ename)-round(length(ename)/2)) || lpad(substr(ename,round(length(ename)/2)),18-round(length(ename)/2),&#x27;+&#x27;) from emp--12.将所有的ename中A开头或A结尾的记录 中的A去掉select ename,replace(ename,&#x27;A&#x27;) from emp where ename like &#x27;A%&#x27; or ename like &#x27;%A&#x27;--13.求所有名字，b字母出现的个数select ename,length(ename)-length(replace(ename,&#x27;b&#x27;)) from emp--14.查找a-z字母表中a字母出现次数--15.截取ename字段的后3位字母select substr(ename,length(ename)-2) from emp--16.求所有员工的名字字符长度，并按照从高到低排列，所有员工名称小写select lower(ename) 员工, length(ename) 字符长度 from emp order by 字符长度 desc--17.将ename和job 进行并列并在中间填充 * 使整列达到20个字符select rpad(ename,20-length(job),&#x27;*&#x27;) || job from emp--18.显示员工姓名中最后一个字符是T的员工以及姓名第二个字是L 的员工 用instr这个语句实现 select ename from emp where instr(ename,&#x27;T&#x27;,-1)=length(ename) or instr(ename,&#x27;L&#x27;,2)=2--19.取所有员工日薪，精确到分，对后面的位数进行四舍五入。select round(sal*12/365,2) from emp--20.取所有员工日薪，精确到分，对小数位数进行截断，只保留整数部分select trunc(round(sal*12/365,2)) from emp21.求所有员工日薪的最大整数并加余数 22.求所有员工日薪的最大小数点后2位有效数23.求入职最早和入职最晚员工24.求所有员工入职10年后的日期25求员工入职的时间时星期几26求员工到目前入职了多少月多少周多少天多少年，所有日期都四舍五入27.员工入职时间月底是星期几28求所有员工入职的下一个月的第一个星期一29求当前时间的一个月零12天是几月几号30求当前年月日时分秒数值相加之和31.将2018年1月1日加一年零2个月 后是什么日期32.把字符串2015-3月-18 13:13:13?转换成日期格式?转换成日期格式，并计算和系统当前时间间隔多少天。33.找出各月倒数第2天受雇的所有员工。34.显示所有11月份入职的员工35.求 各个工作岗位中 工资最高的金额和最低的金额36.求各个部门的工资总和，并列出工资数最高的金额，求标准差。37.求各部门薪酬最大值和最小值的差值38.统计 85年前入职的员工 和85年入职后的员工的平均工资39. 将30号部门人员都改40号部门 人员显示40.对员工工资进行评级 4000-5000 A级   3000-4000B级 2-3000C级 1-2000D级 1000以下的是F级41.对各个部门各职业工资情况进行从高到低排序\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5Python/5.28%E6%80%BB%E7%BB%93%EF%BC%9APython%E5%9F%BA%E7%A1%80/","content":"VS操作ctrl+&#x2F;  注释tab  缩进shift+tab  往回缩进\n数据类型数字型：bool int float非数字型：str list tuple set dict日期型：time datetimetype(n) 查看变量n的类型\nname=&quot;hello&quot; age=10.5 xb=False #区分大小写print(name,end=&quot;&quot;) #小明学号为00001，年龄为18岁，身高为1.79米 sno=1 age=18 sname=&quot;小明&quot; high=1.786 print(type(name)) #查看name的数据类型#print打印时，字符数据类型可以使用+与&quot;&quot;连接#其他类型则最好使用f&quot;&#123;变量&#125;其他内容&quot;print(sname+&quot;你好&quot;)print(sname,&quot;你好&quot;) #以空格分隔print(f&quot;&#123;sname&#125;学号为&#123;sno&#125;,年龄为&#123;age&#125;岁,身高为&#123;high&#125;米&quot;) print(f&quot;&#123;sname&#125;学号为&#123;sno:05d&#125;，年龄为&#123;age&#125;岁，身高为&#123;high:.2f&#125;米&quot;)#05d：数字宽度为5位，不足补零（`d`表示十进制整数）#浮点数保留2位小数（`f`表示浮点数，`.2`控制小数位数）\n\n输入使⽤ input 函数来接收⽤⼾从键盘输⼊，input输⼊的内容是字符串型\npwd=input(&quot;请输⼊密码：&quot;) print(type(pwd))print(int(pwd)+5)\n 使⽤ int() 、 float() 、 str() 等对变量进行数据类型的转换\n运算符算数： + - * &#x2F; %( 取余 ) **( 幂 ) &#x2F;&#x2F;( 取商 )⽐较： &#x3D;&#x3D; !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;赋值： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; **&#x3D; &#x2F;&#x2F;&#x3D;逻辑： and or not\n流程控制if 选择结构sex=&quot;女&quot; if sex==&quot;男&quot;: \tprint(&quot;打游戏&quot;) elif sex==&quot;女&quot;: \tprint(&quot;去逛街&quot;) else: \tprint(&quot;其他&quot;)\n1 、每个条件后⾯要使⽤冒号  : ，表⽰接下来是满⾜条件后要执⾏的语句块。2 、使⽤缩进来划分语句块，缩进采⽤ Tab 键或者 4 个空格，相同缩进组成⼀个语句块。3 、在 Python 中没有 case 语句。\nwhile for 循环结构# 输出1-10数字 i= 1 while i&lt;=10: \tprint(i) \ti+=1 # 字符串可以直接循环输出里面的字符 names=&quot;hello world*你好&quot; for i in names: #i逐个字符遍历\tprint(i) \t#range序列，从0开始，左闭右开#range(1,10,2) 1开始数字，10结束数字（不包含），步长2for i in range(1,10) #1,2,3...9\tprint(i)\n\n索引切片字符串的索引截取，变量名 [ 头下标 : 尾下标 ]索引值以 0 为开始值，-1 为从末尾的开始位置![[Pasted image 20250528112354.png]]\n#索引切片 #abcdef#012345s=&quot;abcdef&quot; print(s[2]) #取下标为2的字符，即c#做切片的时候，是左闭右开的，也就是不包括右边数字对应的下标索引 print(s[0:4]) #取下标0-4的字符（取不到4），即abcd print(s[2:]) #取下标为2开始直到结束的字符，即cdefprint(s[0:5:2]) #步长为2（即中间隔一个），即ace\n\n字符串相关操作+拼接 *复制 “””保留格式\n#len() 获取字符串长度str=&quot;today&quot; l=len(str) #str.find() 字符查找 ,找到返回索引，没找到返回-1 name = &quot;LionelLionel&quot; name.find(&quot;i&quot;) #返回1print(name.find(&quot;i&quot;)) #显示还需使用printname.find(&quot;i&quot;,3) #开始索引，从下标3的字符开始找name.find(&quot;i&quot;,1,2) #代表开始索引和结束索引 #str.rfind() 从右侧开始查找 name.rfind(&quot;i&quot;) #返回7#str.isdigit() #判断字符串str是否为数字#全是数字返回True，存在其他字符返回Falsesname=&quot;he54ll999&quot; for i in sname: \tif i.isdigit(): \t\tprint(i) i=input(&quot;输入字符：&quot;)if i.isdigit(): \tprint(i+&quot;是数字&quot;) #123else:\tprint(i+&quot;不是数字&quot;) #hao123#str.count() 统计字符串里某个字符或子字符串出现的次数 print(sname.count(&quot;l&quot;))\n\nlist 列表list （列表） 是 Python 中使⽤最频繁的数据类型，专⻔⽤于存储⼀串数据，可以完成⼤多数集合类的数据结构实现存储的数据称为元素，元素之间⽤逗号分隔列表中元素的类型可以不相同，它⽀持数字，字符串甚⾄可以包含列表（所谓嵌套）列表和字符串⼀样，索引从 0 开始，列表同样可以被索引和截取，列表被截取后返回⼀个包含所需元素的新列表list 可以使⽤ + 操作符进⾏拼接⽤星号  *  可以将列表中的元素解包为独立的元素，常用于函数传参或合并列表创建空列表： 变量名&#x3D;[]\n列表常用操作list1=[1,2,3,4,5,6]print(*list1)  #输出列表的所有元素，默认以空格隔开print(*list1,sep=&quot;\\n&quot;) #可使用sep设置分割符#一个列表可以同时对多个变量赋值，前提是变量数与列表的元素个数一致s1,s2,s3=[ni,hao,hello]print(s1)print(s2)print(s3)# 增加list1.append(值)  #在列表末尾追加一个元素list1.extend([值1,值2])  #在列表末尾追加多个元素list1.insert(下标,值)  #将一个元素插入到列表指定位置# 删除list1.remove(值)  #从列表中删除第一次出现在列表中的值list1.pop(下标)  #删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除后列表的最后一个元素del list1[下标1:下标2:步长]  #按照切片指定索引删除列表元素list1.clear()  #清空列表# 修改list1[下标]=值  #修改指定索引的元素，元素不存在会报错# 查询list1[下标]  #根据索引取值，索引不存在会报错list1.count(值)  #返回列表中包含某个值的个数list1.sort()  #将列表中的元素进行排序（升序）list1.sort(reverse=True) #降序排序list1.reverse()  #列表反转排序len(list1)  #返回列表长度（元素个数）max(list1)  #返回列表元素最大值min(list1)  #返回列表元素最小值sum(list1)  #返回列表元素的总和# 索引和元素同时显示for i in range(len(list1)):    print(i,list1[i])# 判断某个元素是否在列表中if 100 in list1:    print(&quot;在&quot;)else:    print(&quot;不在&quot;)# 列表嵌套列表（多维数组）list1=[45,60,5,8,&quot;hello&quot;,False,4.5,[365,648,&quot;hello&quot;]]print(list1[-1][-1][0])  #取出h\n\n字符串与列表转换split 分割字符串为列表str1=&quot;hello world test&quot;# 将字符串以空格分割存入列表list1=str1.split(&quot; &quot;)  #在&quot;&quot;内设置分割符list1=str1.split()  #默认处理连续空格# 可以使用split拆分后赋值给多个str2=&quot;nihao 你好 123&quot;list2=str2.split(&quot; &quot;)s1,s2,s3=str2.split(&quot; &quot;)# 等效于s1,s2,s3=list2print(s1) #nihaoprint(s2) #你好print(s3) #123\njoin 拼接列表为字符串list1=[&quot;hello&quot;,&quot;world&quot;,&quot;test&quot;]# 将列表元素以_拼接str2=&quot;_&quot;.join(list1)  #在&quot;&quot;内设置拼接符\n\n作业练习# 上机练习1# 1.定⼀个浮点型，将其转成int类型，观察取整后截断情况n=int(3.14)print(n)# 2.定义⼀个整型，将其转成float，再计算其平⽅n=float(3)print(n**2)# 3.不换⾏输出两个字符串（print⽅法的end参数）我喜欢 编程print(&quot;我喜欢&quot;, end=&quot;编程&quot;)# 4.输⼊⼀个数字，判断是奇数还是偶数n=input(&quot;请输入一个数字&quot;)if n.isdigit():    if int(n)%2==0 :        print(f&quot;&#123;n&#125;是偶数&quot;)    else:         print(f&quot;&#123;n&#125;是奇数&quot;)else:    print(&quot;输入的不是数字！&quot;)# 5.输出8到88的偶数for i in range(8,89,2):    print(i)# 6.已知字符串，s=&quot;哈佛在等我呢&quot;s=&quot;哈佛在等我呢&quot;# 获取第4⾄第5个字符print(s[3:5])# 获取左起第3个起所有的字符print(s[2:])# 字符串做*运算，拷⻉字符串5次print(s*5)# 7.从键盘接收⼀个字符串，查找它在 s=&quot;aforsadvj happy so thank&quot; 中是否存在，如果存在 就打印 &quot; 找到你了 &quot; ，并且显⽰出现的次数，不存在就打印 &quot; 怎么没有你 &quot;s=&quot;aforsadvj happy so thank&quot;fs=input(&quot;请输入要查找的字符串: &quot;)count=s.count(fs)if count&gt;0 :    print(&quot;找到你了&quot;)    print(f&quot;出现次数: &#123;count&#125;&quot;)else:    print(&quot;怎么没有你&quot;)# 8.从键盘接收⼀个字符串，取出字符串中的数字，并且统计字符串的总⻓度及所有数字出现的个数。s=input(&quot;请输入字符串：&quot;)cd=0for i in s:    if i.isdigit():        cd+=1print(f&quot;总长度：&#123;len(s)&#125;&quot;)print(f&quot;所有数字数量：&#123;cd&#125;&quot;)# 9.根据完整路径从路径中取出⽂件路径，⽂件扩展名py str2=&quot;D:\\ 软件 \\python\\python39\\Tools\\scripts\\mitype.py&quot;n1=str2.rfind(&quot;\\\\&quot;)n2=str2.rfind(&quot;.&quot;)+1print(str2[0:n1])print(str2[n2:])# 输出结果为：# D:\\ 软件 \\python\\python39\\Tools\\scripts # py# 上机练习2# 1.请将列表 l1=[&quot;hello&quot;,&quot;world&quot;,&quot;test&quot;] 中的每个元素通过 &quot;_&quot; 链接起来。 输出结果： hello_world_testl1=[&quot;hello&quot;,&quot;world&quot;,&quot;test&quot;]str1=&quot;_&quot;.join(l1)print(str1)# 2.有如下两个列表 list1 = [&quot;M&quot;, &quot;na&quot;, &quot;i&quot;, &quot;Ke&quot;] list2 = [&quot;y&quot;, &quot;me&quot;, &quot;s&quot;, &quot;lly&quot;] #处理后保存到新列表中list3 = []for i in range(len(list1)):    s=list1[i]+list2[i]    list3.append(s)print(list3)#输出结果： [&#x27;My&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;Kelly&#x27;]# 3.⽣成 100 个卡号 , 存储到列表中打印输出；卡号以 6102009 开头 , 后⾯ 3 位依次是 （ 001,002,003,...,100 ）list1=[]for i in range(1,101):    n=f&quot;6102009&#123;i:03d&#125;&quot;    list1.append(n)print(*list1,sep=&quot;\\n&quot;)#直接赋值写法(推导式)list1 = [    f&quot;6102009&#123;i:03d&#125;&quot;  #:03d表示3位整数，不足补0    for i in range(1,101)]print(*list1,sep=&quot;\\n&quot;)\t# 4.已知字符串 str1=&quot;hello c sharp&quot;#将其中的单词以反序输出 list1=str1.split(&quot; &quot;)list1.reverse()print(*list1)# str2=&quot; &quot;.join(list1)# print(str2)#输出结果：sharp c hello# 5.给定⼀个列表,将每⼀位数字变成它的平⽅ alist = [1,2,3,4,5,6,7] for i in range(len(alist)):    alist[i]**=2print(alist)#输出结果： [1, 4, 9, 16, 25, 36, 49]# 6.重新使⽤split和join的⽅法做1.9题:根据完整路径从路径中取出⽂件路径，⽂件扩展名pystr2=&quot;D:\\ 软件 \\python\\python39\\Tools\\scripts\\mitype.py&quot;list2=str2.split(&quot;\\\\&quot;)print(list2)list3=list2[-1].split(&quot;.&quot;)list2.pop()str3=&quot;\\\\&quot;.join(list2)print(str3)print(list3[-1])# 输出结果为：# D:\\ 软件 \\python\\python39\\Tools\\scripts # py# 7.把下⾯的列表⾥⾯的数字提取出来⽣成⼀个新的列表list1 = [13, 2, 55, [11, 32, &quot;eee&quot;], [&quot;ssd&quot;, 55, &quot;ggg&quot;]]list2 = []def func(l):    for i in l:        if type(i) == int:            list2.append(i)        elif type(i) == list:            func(i)            func(list1)print(list2) # 输出: [13, 2, 55, 11, 32, 55]"},{"url":"/2025/06/07/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5Python/5.29%E6%80%BB%E7%BB%93%EF%BC%9A%E5%85%83%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E5%AD%97%E5%85%B8%E3%80%81%E6%8E%A8%E5%AF%BC%E5%BC%8F/","content":"tuple （元组）只读的列表元组（tuple）是 Python 中一种不可变的序列类型，用于存储有序、可重复的元素。它与列表（list）类似，但关键区别在于 元组一旦创建，内容不可修改（不可变性）。\ntuple1 = (1,2,34,5,6) #元组定义print(type(tuple1)) #类型为tupleprint(tuple1[3]) #访问元素for i in tuple1: #遍历元组\tprint(i)#想对元组操作，需要将其转为列表list1=list(tupe1)\n\nset （集合）无序，去掉重复数据集合（set）是 Python 中一种无序、不重复的容器类型，基于哈希表实现，常用于快速成员检测、去重和数学集合运算（如并集、交集）。\nset1 = set()  #创建空集合，必须使用set(),使用&#123;&#125;会创建一个空字典set1 = &#123;1,2,3,4,5,5,4,3,2,1&#125;  #集合定义print(type(set1)) #类型为setprint(set1)  #只有&#123;1,2,3,4,5&#125;set1.add(666)  #添加元素set1.remove(55)  #删除元素set1.pop()  #随机删除一个元素#不能使用下标访问set，所以修改操作一般为remove操作 + add操作\n\ndict （字典）字典是 键 (key) : 值 (value)  的集合在同⼀个字典中，键 (key) 必须是唯⼀的创建空字典使⽤  { } \n# 创建字典dict1 = &#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;New York&#x27;&#125;  # 直接创建dict2 = dict([(&#x27;name&#x27;, &#x27;Bob&#x27;), (&#x27;age&#x27;, 25)])  # 使用 dict() 函数从元组列表创建dict3 = dict(name=&#x27;Charlie&#x27;, age=35)  # 使用关键字参数创建empty_dict = &#123;&#125;  # 创建空字典# 访问元素print(dict1[&#x27;name&#x27;])  # 通过键获取值，键不存在会报错print(dict1.get(&#x27;age&#x27;))  # 通过 get() 方法获取值，键不存在返回 Noneprint(dict1.get(&#x27;gender&#x27;, &#x27;Unknown&#x27;))  # 可设置默认值，键不存在时返回# 添加/修改元素dict1[&#x27;job&#x27;] = &#x27;Engineer&#x27;  # 若键不存在，会添加新键值对dict1[&#x27;age&#x27;] = 31  # 若键存在，则修改键对应的值dict1.update(&#123;&#x27;city&#x27;: &#x27;Los Angeles&#x27;, &#x27;hobby&#x27;: &#x27;Reading&#x27;&#125;)  # 批量添加/更新# 删除元素del dict1[&#x27;city&#x27;]  # 删除指定键的键值对age = dict1.pop(&#x27;age&#x27;)  # 删除指定键的键值对，并返回对应的值last_item = dict1.popitem()  # 删除并返回字典的最后一个键值对（Python 3.7+ 有序）dict1.clear()  # 清空字典# 遍历字典for key in dict1:  # 遍历键    print(key,dict1[key])for value in dict1.values():  # 遍历值    print(value)for key,value in dict1.items():  # 遍历键值对    print(key,value)# 其他常用操作len(dict1)  # 返回字典中键值对的数量&#x27;name&#x27; in dict1  # 检查键是否存在list(dict1.keys())  # 获取所有键的列表list(dict1.values())  # 获取所有值的列表list(dict1.items())  # 获取所有键值对的列表# 字典复制dict_copy = dict1.copy()  # 浅复制import copydeep_copy = copy.deepcopy(dict1)  # 深复制# 字典合并（Python 3.9+）merged_dict = dict1 | dict2  # 使用 | 运算符合并两个字典dict1 |= dict2  # 原地合并（更新 dict1）\n\n推导式输⼊源： range list tuple set dict输出源： list tuple set dict推导式格式为：表达式 for 变量 in 输⼊源 if 条件推导式格式为：表达式 for 变量 in 输⼊源 if 条件 for 变量 in 输⼊源 if 条件\n# 给定一个列表,将每一位数字变成它的平方 # alist = [1, 2, 3, 4, 5, 6, 7] # 输出结果：[1, 4, 9, 16, 25, 36, 49] alist = [1, 2, 3, 4, 5, 6, 7] print([i**2 for i in alist]) print([i**2 for i in alist if i+2&gt;5]) print(&#123;i**2 for i in alist&#125;) print(tuple((i**2 for i in alist))) print(&#123;i**2:f&quot;test&#123;i&#125;&quot; for i in alist&#125;) #推导 30 以内可以被 3 整除的整数为列表： print([i for i in range(30) if i % 3 == 0])\n\n数据源使用字典d1=&#123;&quot;张三&quot;:20,&quot;李四&quot;:30,&quot;王五&quot;:40&#125; # 推导列表 print([i for i in d1.values()]) # 推导字典 print(&#123;i:i**2 for i in d1.values() if i&gt;20&#125;) # 推导集合 print(&#123;i for i in d1.values() if i&gt;20&#125;) # 推导元组 print(tuple((i for i in d1.values() if i&gt;20))) # 二重循环 提取数字为列表[45,67,45,34,65,78] l1=[[45,67,45,&quot;hhh&quot;],[34,65,78,&quot;test&quot;]] print([j for i in l1 for j in i if type(j)==int])\n作业练习#1. 获取字典中的值：获取下列字典键为 &#x27;history&#x27; 的值 sampleDict = &#123;&quot;class&quot;:&#123;&quot;student&quot;:&#123;&quot;name&quot;:&quot;Mike&quot;,&quot;marks&quot;:&#123;&quot;physics&quot;:70,&quot;history&quot;:80&#125;&#125;&#125;&#125; print(sampleDict[&quot;class&quot;][&quot;student&quot;][&quot;marks&quot;][&quot;history&quot;])# 2.请将元组 v1 = (11,22,33) 中的所有元素追加到列表 v2 = [44,55,66] 中 v1 = (11,22,33)v2 = [44,55,66]# v2=v2+list(v1)v2+=v1print(v2)# 3.已知列表： list1 = [&#x27;life&#x27;,&#x27;is&#x27;,&#x27;short&#x27;] list2 = [&#x27;you&#x27;,&#x27;need&#x27;,&#x27;python&#x27;] list3 = [1,2,3,4,5,3,4,2,1,5,7,9] #完成以下操作： # （1）把上述三个列表构造为⼀个集合 set1 set1 = set(list1+list2+list3)print(set1)# （2）输出集合的⻓度 print(len(set1))# （3）把 python 从集合中移除set1.remove(&#x27;python&#x27;)print(set1)# 4.已知列表 li = [11,22,100,33,44,66,55,77,88,99,90]# 将所有⼤于66的值保存⾄字典的第⼀个key对应的列表中，将⼩于66的值保存⾄第⼆个key对应的列表中。 d1 = &#123;&#x27;key1&#x27;:[],&#x27;key2&#x27;:[]&#125;for i in li:    if i &gt; 66 :        d1[&#x27;key1&#x27;].append(i)    elif i &lt; 66 :        d1[&#x27;key2&#x27;].append(i)print(d1)# 输出结果： &#123;&#x27;key1&#x27;:[100,77,88,99,90],&#x27;key2&#x27;:[11,22,33,44,55]&#125; # 5.已知列表 list1 = [11,22,11,33,44,55,66,55,66] #统计列表中每个元素出现的次数，⽣成⼀个字典 输出结果： &#123;11:2,22:1.....&#125; 注：顺序不要求 d1 = &#123;&#125;for i in list1:    if i not in d1:        d1[i]=1    else:        d1[i]+=1print(d1) # 6.已知字典 d1=&#123;&quot;subjects&quot;:[&#123;&quot;rate&quot;:&quot;7.4&quot;,&quot;cover_x&quot;:640&#125;,&#123;&quot;rate&quot;:&quot;6.0&quot;,&quot;cover_x&quot;:1080&#125;]&#125; # 处理显⽰成如下格式输出： 7.4 640 6.0 1080l1=[]for i in d1.values():    for j in i:        for k in j.values():            l1.append(k)print(*l1)# 7.已知如下数据 d1 = &#123; &#x27;192.168.1.1&#x27;:&#123;&#x27;cpu&#x27;:&#x27;0.23&#x27;,&#x27;内存&#x27;:&#x27;16&#x27;,&#x27;硬盘&#x27;:&#x27;500&#x27;&#125;,       &#x27;192.168.1.2&#x27;:&#123;&#x27;cpu&#x27;:&#x27;3.22&#x27;,&#x27;内存&#x27;:&#x27;64&#x27;,&#x27;硬盘&#x27;:&#x27;700&#x27;&#125;,       &#x27;192.168.1.3&#x27;:&#123;&#x27;cpu&#x27;:&#x27;1.99&#x27;,&#x27;内存&#x27;:&#x27;32&#x27;,&#x27;硬盘&#x27;:&#x27;800&#x27;&#125; &#125; #处理显⽰成如下格式输出： # 192.168.1.1: cpu 0.23 内存 16 硬盘 500 # 192.168.1.2: cpu 3.22 内存 64 硬盘 700 # 192.168.1.3: cpu 1.99 内存 32 硬盘 800 for i,j in d1.items():    str1=f&quot;&#123;i&#125;: &quot;    for n,m in j.items():        str1+=f&quot;&#123;n&#125; &#123;m&#125;&quot;    print(str1)# 8.有字符串 &quot;k: 1|k1:2|k2:3 |k3 :4&quot; 处理成字典 &#123;&#x27;k&#x27;:1,&#x27;k1&#x27;:2,&#x27;k3&#x27;:4&#125; # 注：字符串替换使⽤ replace 函数str1 = &quot;k: 1|k1:2|k2:3 |k3 :4&quot;str1 = str1.replace(&quot; &quot;,&quot;&quot;)list1 = str1.split(&quot;|&quot;)dict1 = &#123;&#125;for i in list1:    key,value = i.split(&quot;:&quot;)    if key != &quot;k2&quot;:        dict1[key] = int(value)print(dict1)# 上机练习4# 1.⽣成⼀个存放 1-100 之间个位数为 3 的数据列表print([i for i in range(1,101) if (i)%10==3])# 2.利⽤列表推导式将已知列表中的整数提取出来 [17, 98, 34, 21] list_two = [True, 17, &quot;hello&quot;, &quot;bye&quot;, 98, 34, 21] print([i for i in list_two if type(i)==int])# 3.根据列表利⽤推导式存放指定列表中 字符串的⻓度如下 # &#123;&#x27;good&#x27;:4, &#x27;nice&#x27;:4, &#x27;see you&#x27;:7, &#x27;bye&#x27;:3&#125; list_three=[&quot;good&quot;, &quot;nice&quot;, &quot;see you&quot;, &quot;bye&quot;]print(&#123;i:len(i) for i in list_three&#125;)# 4.⽣成⼀个列表，其中的元素为 &#x27;0-1&#x27;，&#x27;1-2&#x27;，&#x27;2-3&#x27;，&#x27;3-4&#x27;，&#x27;4-5&#x27; print([f&quot;&#123;i&#125;-&#123;i+1&#125;&quot; for i in range(5)])# 5.已知数据 t1=((1,100),(2,30),(3,80),(4,234)) # 推导成列表 [100,30,80,234] print([i[1] for i in t1])# 推导成字典 &#123;1: 100, 2: 30, 3: 80, 4: 234&#125; print(&#123;i[0]:i[1] for i in t1&#125;)# 推导成列表 [&#123;&#x27;name&#x27;:1, &#x27;value&#x27;:100&#125;,&#123;&#x27;name&#x27;:2,&#x27;value&#x27;:30&#125;,&#123;&#x27;name&#x27;:3,&#x27;value&#x27;:80&#125;,&#123;&#x27;name&#x27;:4,&#x27;value&#x27;:234&#125;]print([&#123;&#x27;name&#x27;:i[0],&#x27;value&#x27;:i[1]&#125; for i in t1])# 6.已知如下列表 students ，在列表中保存了 6 个学⽣的信息，根据要求完成下⾯的题⽬ students = [     &#123;&#x27;name&#x27;:&#x27;⼩花&#x27;,&#x27;age&#x27;:19,&#x27;score&#x27;:90,&#x27;gender&#x27;:&#x27;⼥&#x27;,&#x27;tel&#x27;:&#x27;15300022839&#x27;&#125;,    &#123;&#x27;name&#x27;:&#x27;明明&#x27;,&#x27;age&#x27;:20,&#x27;score&#x27;:40,&#x27;gender&#x27;:&#x27;男&#x27;,&#x27;tel&#x27;:&#x27;15300022838&#x27;&#125;,    &#123;&#x27;name&#x27;:&#x27;华仔&#x27;,&#x27;age&#x27;:18,&#x27;score&#x27;:100,&#x27;gender&#x27;:&#x27;⼥&#x27;,&#x27;tel&#x27;:&#x27;15300022839&#x27;&#125;,    &#123;&#x27;name&#x27;:&#x27;静静&#x27;,&#x27;age&#x27;:16,&#x27;score&#x27;:90,&#x27;gender&#x27;:&#x27;不明&#x27;,&#x27;tel&#x27;:&#x27;15300022428&#x27;&#125;,    &#123;&#x27;name&#x27;:&#x27;Tom&#x27;,&#x27;age&#x27;:17,&#x27;score&#x27;:59,&#x27;gender&#x27;:&#x27;不明&#x27;,&#x27;tel&#x27;:&#x27;15300022839&#x27;&#125;,    &#123;&#x27;name&#x27;:&#x27;Bob&#x27;,&#x27;age&#x27;:18,&#x27;score&#x27;:90,&#x27;gender&#x27;:&#x27;男&#x27;,&#x27;tel&#x27;:&#x27;15300022839&#x27;&#125; ] #打印学⽣分数列表 print([i[&#x27;score&#x27;] for i in students])#打印⼿机尾号是 8 的学⽣的名字列表 print([i[&#x27;name&#x27;] for i in students if i[&#x27;tel&#x27;][-1]==&#x27;8&#x27;])#打印不及格的同学的所有信息列表，效果如下： print([j for i in students if i[&#x27;score&#x27;]&lt;60 for j in i.values()])#[&#x27;明明&#x27;,20,40,&#x27;男&#x27;,&#x27;15300022838&#x27;,&#x27;Tom&#x27;,17,59,&#x27;不明&#x27;,&#x27;15300022839&#x27;]"},{"url":"/2025/06/07/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5Python/6.3%E6%80%BB%E7%BB%93%EF%BC%9A%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E5%A4%9A%E6%80%81/","content":"文件读写文本文件写# 写文件时若路径没有该文件会新建文件with open(&quot;D:\\\\wtest.txt&quot;, mode=&#x27;w&#x27;, encoding=&#x27;UTF-8&#x27;) as f : \tf.write(&quot;ccccccccccccccc\\n&quot;)  #不会自动换行，需要自行加\\n换行\tf.write(&quot;ccccccccccccccc\\n&quot;) # with语句会自动管理文件的生命周期，在代码块结束后自动关闭文件，无需手动调用f.close()#如果直接通过open()打开文件且不使用with语句，必须手动调用f.close()关闭文件f=open(&quot;file.txt&quot;, &quot;w&quot;) f.write(&quot;Hello, World!&quot;) f.close() # 必须手动关闭\n文本文件读with open(&quot;/root/python/test.txt&quot;, mode=&#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as f: \tres1 = f.read()  #将文件的全部内容读取为一个字符串\tres2 = f.readlines()  #每行作为一个元素返回列表\tprint(res1) \n\nmodew 覆盖写a 追加写r 读\npython 库标准库，扩展库，自定义库⽤  import  或者  from … import  来导⼊相应的库\nimport csv  # 导入CSV处理模块，用于读写CSV格式文件data = [&#123;&quot;id&quot;: 1, &quot;passwd&quot;: &quot;123456&quot;, &quot;bat&quot;: 1000&#125;,  # 示例数据：包含两个用户信息的字典列表        &#123;&quot;id&quot;: 2, &quot;passwd&quot;: &quot;abcdef&quot;, &quot;bat&quot;: 2000&#125;]# 写入CSV文件with open(&quot;/root/python/user.csv&quot;, mode=&quot;w&quot;, encoding=&quot;UTF-8&quot;) as f:    # 创建DictWriter对象，指定表头字段顺序    writer = csv.DictWriter(f, fieldnames=[&quot;id&quot;, &quot;passwd&quot;, &quot;bat&quot;])    writer.writeheader()  # 写入表头行（id,passwd,bat）    writer.writerows(data)  # 将data中的所有字典按表头格式写入文件# 读取CSV文件with open(&quot;/root/python/user.csv&quot;, mode=&quot;r&quot;, encoding=&quot;UTF-8&quot;) as f:    reader = csv.DictReader(f)  # 创建DictReader对象，自动将首行作为表头    # 因为文件是字典列表的格式，因此需要遍历文件中的每一行以取出其中的每一个字典    for i in reader:          print(i)  # 输出每一个字典,可通过键名访问字段值：i[&#x27;id&#x27;] 返回 &#x27;1&#x27;        data.append(i)  # 将字典逐个添加到列表中给之后使用        # 若data有原始数据需要覆盖写可于遍历前先清空：data.clear()\n\n异常try:     x = int(input(&quot;请输入一个数字: &quot;))     z=100/x     if x&lt;0 :          raise Exception(&quot;x不能小于0&quot;)  # 自定义异常    if x&gt;100:        raise Exception(&quot;x不能大于100&quot;)  # 可设置多个异常情况，后面的e会根据情况输出信息    print(&quot;ok&quot;)      except ValueError:     print(&quot;您输入的不是数字,请再次尝试输入！&quot;) except ZeroDivisionError:     print(&quot;除数不能为零&quot;) except Exception as e:     print(&quot;其他错误:&quot;,e)  # e显示为异常信息\n\n\n封装、继承、多态封装类及对象包含属性和⽅法属性：静态特征 全局变量 成员⽅法：动态特征 函数 功能魔法⽅法：不需要调⽤就可以⾃动执⾏。作⽤：初始化对象的成员 ( 给对象添加属性 )\n#类定义 class People: \tname=&quot;&quot; \tage=0\tdef __init__(self,xingming,nianling): \t\tself.name=xingming \t\tself.age=nianling \tdef show(self): \t\tprint(f&quot;姓名是&#123;self.name&#125;,年龄是&#123;self.age&#125;&quot;) \t\t#调用 if __name__==&quot;__main__&quot;: \tldh=People(&quot;刘德华&quot;,50) \tldh.show()\n\n继承class ⼦类名 ( ⽗类名 ):⼦类直接具备⽗类的属性和⽅法解决代码重⽤问题，提⾼开发效率\nclass Student(People): \tgrade=&quot;&quot; \tdef __init__(self, xingming, nianling,nianji): \t\tsuper().__init__(xingming,nianling) \t\tself.grade=nianji \tdef test(self): \t\tprint(f&quot;年级是&#123;self.grade&#125;&quot;) \t\t\t# 方法重写 \tdef show(self): \t\tprint(f&quot;姓名是&#123;self.name&#125;,年龄是&#123;self.age&#125;,年级是&#123;self.grade&#125;&quot;)\n\n多态多态从字⾯上理解就是⼀个事物可以呈现多种状态。没有继承就没有多态。多态是能⾃⼰进⾏判断该去执⾏什么 , 创建⼀个列表来体现 , ⾯向对象的列表。\nlist1=[ldh,zjl] # 通过遍历以一个触发使用各子类重写方法的过程就称作多态for i in l1: \tprint(i.name) \ti.show()\n\n作业练习# 1.将内容 “ 诚挚邀请您来参加本次宴会 ” 追加到 “ 邀请函 .txt” ⽂件末尾。 with open(&quot;/root/python/邀请函.txt&quot;,mode=&#x27;a&#x27;,encoding=&#x27;UTF-8&#x27;) as f : \tf.write(&quot;诚挚邀请您来参加本次宴会&quot;)  \t# f.close()\t# 2.读取邀请函的内容。with open(&quot;/root/python/邀请函.txt&quot;,mode=&quot;r&quot;,encoding=&quot;UTF-8&quot;) as f:    result=f.read()    print(result)    # f.close()# 3.修改 atm 取款机数据为持久化永久存储， csv 读取实现（分别使⽤函数实现读和取） , 使⽤异常处理 atm 取款机读取 csv 时判断⽂件是否存在，如果⽂件不存在提⽰ &quot; 没有⽂件使⽤原数据 &quot;def init():    try:        with open(&quot;/root/python/user.csv&quot;,mode=&quot;r&quot;) as f:            result=csv.DictReader(f)            data.clear()            for i in result:                data.append(i)            # f.close()    except FileNotFoundError:        print(&quot;没有文件使用原数据&quot;)# 4.使⽤异常在 atm 取款机的项⽬中存款函数中： 如果输⼊的存款⾦额不是整数则提⽰：请输⼊整数； 如果输⼊的存款⾦额不是 100 的倍数或者是负数则提⽰：请输⼊ 100 的倍数的正整数# 存款def CunKuan(userdata):    money=input(&quot;请输入存款金额:&quot;)    money=checkMoney(money)    userdata[&quot;bat&quot;]=str(float(userdata[&quot;bat&quot;])+money)    print(f&quot;您已成功存款&#123;money&#125;，您当前的余额为：&#123;userdata[&#x27;bat&#x27;]&#125;&quot;)    inputToReturn()# 检测金额输入def checkMoney(m):    try:        m=float(m)        if m &lt;=0 or m%100!=0:            raise Exception(&quot;金额必须为100倍数的正整数!&quot;)        return m    except ValueError:        print(&quot;请输入整数！&quot;)        inputToReturn()    except Exception as e:        print(e)        inputToReturn()# 上机练习8# 1.定义⼀个⽔果类，定义属性（名称和颜⾊），使⽤魔法⽅法，然后通过⽔果类，创建苹果对象、橘⼦对象、西⽠对象并分别添加上颜⾊属性，定义⼀个⽅法分别输出如： #红⾊的苹果真好吃 #橙⾊的橘⼦真好吃 #绿⾊的西⽠真好吃 class Fruit: \tname=&quot;&quot; \tcolor=&quot;&quot; \t\tdef __init__(self,name,color): \t\tself.name=name\t\tself.color=color\t\t \tdef show(self): \t\tprint(f&quot;&#123;self.color&#125;的&#123;self.name&#125;真好吃&quot;) \t\t\t\t    #调用 if __name__==&quot;__main__&quot;: \tapple=Fruit(&quot;苹果&quot;,&quot;红色&quot;)\torange=Fruit(&quot;橘子&quot;,&quot;橙色&quot;)\twatermelon=Fruit(&quot;西瓜&quot;,&quot;绿色&quot;)\tapple.show()\torange.show()\twatermelon.show()\t# 猫类Cat。属性:⽑的颜⾊color，品种breed，亲和度love。⽅法:吃饭eat() # 狗类Dog。属性:⽑的颜⾊color，品种breed，忠诚度loyal。⽅法:吃饭eat() # 要求 : 使⽤封装、继承和多态，根据以上要求抽取⽗类为Animal，重写eat⽅法，输出打印如下： # 有⼀只亲和度是10级的花⾊的波斯猫正在吃⻥.....# 有⼀只忠诚度是9级的⿊⾊的藏獒正在啃⻣头..... # 有⼀只亲和度是8级的⽩⾊的加菲猫正在吃⻥..... # 有⼀只忠诚度是 6 级的棕⾊的茶杯⽝正在啃⻣头.....class Animal: \tcolor=&quot;&quot;\tbreed=&quot;&quot; \t\tdef __init__(self,color,breed): \t\tself.color=color\t\tself.breed=breed\t\t \tdef eat(self): \t\tprint(f&quot;有一只&#123;self.color&#125;的&#123;self.breed&#125;正在吃饭....&quot;)\t\tclass Cat(Animal):    love=&quot;&quot;    def __init__(self, color, breed,love):        super().__init__(color, breed)        self.love=love\t\t    def eat(self):         print(f&quot;有一只亲和度是&#123;self.love&#125;级&#123;self.color&#125;的&#123;self.breed&#125;正在吃鱼....&quot;)class Dog(Animal):    loyal=&quot;&quot;        def __init__(self, color, breed,loyal):        super().__init__(color, breed)        self.loyal=loyal    def eat(self):         print(f&quot;有一只忠诚度是&#123;self.loyal&#125;级&#123;self.color&#125;的&#123;self.breed&#125;正在啃骨头&quot;)\t\t\t\t#调用 if __name__==&quot;__main__&quot;:     cat1=Cat(&quot;花色&quot;,&quot;波斯猫&quot;,&quot;10&quot;)    dog1=Dog(&quot;黑色&quot;,&quot;藏獒&quot;,&quot;9&quot;)    cat2=Cat(&quot;白色&quot;,&quot;加菲猫&quot;,&quot;8&quot;)    dog2=Dog(&quot;棕色&quot;,&quot;茶杯犬&quot;,&quot;6&quot;)    list1=[cat1,dog1,cat2,dog2]    for i in list1:         i.eat()\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5Python/6.4%E6%80%BB%E7%BB%93%EF%BC%9A%E8%BF%9E%E6%8E%A5MySQL%E3%80%81%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/","content":"time &amp; datetime 库Python 中处理时间的标准库提供获取系统时间并格式化输出功能提供系统级精确计时功能，⽤于程序性能分析\ntime库包含三类函数时间获取： localtime()时间格式化： strftime()   strptime()程序计时： sleep()   perf_counter()\nimport time # 日期类型与字符串直接互相转化 # 日期转字符串t1= time.localtime() print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,t1)) # 字符串转日期timeStr = &#x27;2018-01-26 12:55:20&#x27; t2=time.strptime(timeStr, &quot;%Y-%m-%d %H:%M:%S&quot;) #测试程序执行时间差 t_start = time.perf_counter()  # 程序从开始到这条代码的运行时间print(&quot;测试&quot;) #开始休眠 time.sleep(5) print(&quot;休眠完毕&quot;) t_end = time.perf_counter() print( t_end-t_start ) import datetime t = datetime.datetime.now() print(datetime.datetime.strftime(t,&quot;%Y-%m-%d %H:%M:%S&quot;)) print(datetime.datetime.strptime(&quot;20230211&quot;,&quot;%Y%m%d&quot;))\n\n连接MySQL操作pymysql 是在 Python3.x 版本中⽤于连接 MySQL 服务器的⼀个库在 vscode 终端下⾯直接运⾏ pip3 install pymysql 安装即可\nimport pymysql # 连接database conn = pymysql.connect( \thost=&quot;127.0.0.1&quot;, \tuser=&quot;root&quot;,\tpassword=&quot;root123456&quot;, \tdatabase=&quot;test&quot;, \tcharset=&quot;utf8&quot;) print(&quot;打开数据库&quot;) #关闭数据库 conn.close() print(&quot;关闭数据库&quot;)\n\n结构操作# 使用预处理语句创建表 sql1 = &quot;&quot;&quot;create table if not exists MovieType( \ttid int primary key, \ttname varchar(20), \ttcontent varchar(500), \ttdate datetime )&quot;&quot;&quot; \tbaoma.execute(sql1) print(&quot;操作成功&quot;)\n\n.execute(sql)的返回值pymysql中，cursor.execute(sql) 的返回值是一个整数，表示：\n\n对于INSERT、UPDATE、DELETE语句：返回受影响的行数（即成功插入、更新或删除的行数）。\n对于SELECT语句：返回结果集的行数（即查询返回的总行数）。\n\n数据增删改操作c=&quot;insert into MovieType values(1,&#x27;喜剧&#x27;,&#x27;这是一种搞笑的视频&#x27;,now())&quot; result=baoma.execute(c) conn.commit() #需要提交才到数据库，有错则rollback print(&quot;插入成功&quot;)\n\n数据查询操作import pymysql sql = &quot;select * from MovieType order by tdate desc&quot; #读一行baoma.execute(sql) data = baoma.fetchone()  #执⾏完毕返回的结果集默认以元组显⽰print(data) #读所有 data = baoma.fetchall() #元组的元组print(data) for i in data: \tprint(i[0],i[1])\n\n\n三层架构表示层（前端UI）业务逻辑层（BLL）(Business Logic Layer)数据访问层（DAL）(Data Access Layer)![[Pasted image 20250604191209.png]]\n作业练习# 1.灵活使⽤ pymyql 来完成创建表、添加数据、查询数据import pymysqlimport datetimedef dbconnect():    # 连接database    conn = pymysql.connect(        host=&quot;127.0.0.1&quot;,        user=&quot;root&quot;,        password=&quot;root123456&quot;,        database=&quot;test&quot;,        port=3306,        charset=&quot;utf8&quot;    )    print(&quot;连接数据库成功&quot;)    return conndef jiegou():    sql=&quot;&quot;&quot;create table if not exists MovieType(    tid int primary key,    tname varchar(20),    tcontent varchar(200),    tdate datetime    )&quot;&quot;&quot;    # 连接database    conn = dbconnect()    jianbiao=conn.cursor()    jianbiao.execute(sql)    print(&quot;MovieType表创建完成&quot;)    jianbiao.close()    conn.close()    print(&quot;关闭数据库成功&quot;)def edit():    print(&quot;示例: 1,喜剧,这是一个搞笑的电影&quot;)    data=input(&quot;请输入要插入的数据（逗号隔开）:&quot;).split(&quot;,&quot;)    tid=int(data[0])    tname=data[1]    tcontent=data[2]    sql=f&quot;insert into MovieType values(&#123;tid&#125;,&#x27;&#123;tname&#125;&#x27;,&#x27;&#123;tcontent&#125;&#x27;,now())&quot;    conn = dbconnect()    inserdata=conn.cursor()    res=inserdata.execute(sql)    if res&gt;0:        print(&quot;添加成功&quot;)    else:        print(&quot;添加失败&quot;)    conn.commit()    inserdata.close()    conn.close()    print(&quot;关闭数据库成功&quot;)# 2.查询数据时⽇期处理成如下格式： # 1 喜剧 这是⼀个搞笑的电影 2023 年 08 ⽉ 21 ⽇ # 2 动作 这是⼀个打⽃的电影 2023 年 08 ⽉ 21 ⽇def cha():    sql=&quot;select * from MovieType&quot;    conn=dbconnect()    show=conn.cursor()    show.execute(sql)    res=show.fetchall()    for i in res:        print(i[0],i[1],i[2],datetime.datetime.strftime(i[3],&quot;%Y年%m月%d日&quot;))    show.close()    conn.close()    print(&quot;关闭数据库成功&quot;)if __name__==&quot;__main__&quot;:    # jiegou()    # edit()    cha()# 上机练习10 三层架构开发豆瓣网# 模型层 Model.pyimport datetimeclass MovieType:    #属性    tid=0    tname=&quot;&quot;    tcontent=&quot;&quot;    tdate=datetime.datetime.now()    #方法    def __init__(self,tid1,tname1,tcontent1):        self.tid=tid1        self.tname=tname1        self.tcontent=tcontent1# 数据层 DAL.pyimport pymysqlclass DBHelper:    #打开数据库    def openDB(self):        #把局部变量变成全局变量        global conn        conn=pymysql.connect(host=&quot;127.0.0.1&quot;,                             user=&quot;root&quot;,                             password=&quot;root123456&quot;,                            database=&quot;test&quot;,                            port=3306,charset=&quot;utf8&quot;)        global baoma        baoma=conn.cursor()    #关闭数据库    def closeDB(self):        baoma.close()        conn.close()    def edit(self,sql):        self.openDB()        result=baoma.execute(sql)        conn.commit()        self.closeDB()        return result            def chaOne(self,sql):        self.openDB()        baoma.execute(sql)        result=baoma.fetchone()        self.closeDB()        return result        def chaAll(self,sql):        self.openDB()        baoma.execute(sql)        result=baoma.fetchall()        self.closeDB()        return result     class MovieTypeDAL(DBHelper):    # 1.录⼊电影类型信息    def insert(self,mt):        sql=f&quot;insert into MovieType values(&#123;mt.tid&#125;,&#x27;&#123;mt.tname&#125;&#x27;,&#x27;&#123;mt.tcontent&#125;&#x27;,now())&quot;        return self.edit(sql)        # 2.1 显示tid的数据内容    def showformtid(self,tid):        sql=f&quot;select * from MovieType where tid=&#x27;&#123;tid&#125;&#x27;&quot;        return self.chaOne(sql)        # 2.2修改电影类型信息    def update(self,mt):        edtname=0        edtcontent=0        if(mt.tname!=&quot;&quot;):            sql1=f&quot;update MovieType set tname=&#x27;&#123;mt.tname&#125;&#x27; where tid=&#123;mt.tid&#125;&quot;            edtname=self.edit(sql1)        if(mt.tcontent!=&quot;&quot;):            sql2=f&quot;update MovieType set tcontent=&#x27;&#123;mt.tcontent&#125;&#x27; where tid=&#123;mt.tid&#125;&quot;            edtcontent=self.edit(sql2)        return edtname,edtcontent            # 3.删除电影类型信息    def delet(self,tid):        sql=f&quot;delete from MovieType where tid=&#123;tid&#125;&quot;        return self.edit(sql)    # 4.显示所有电影类型信息    def showall(self):        sql=&quot;select * from MovieType&quot;        return self.chaAll(sql)# 业务逻辑层 BLL.pyfrom Model import MovieTypefrom DAL import MovieTypeDALimport datetimemtdal=MovieTypeDAL()menu=&quot;&quot;&quot;\\n-------------⾖瓣⽹管理系统-----------------===========功能菜单===========1 录⼊电影类型信息2 修改电影类型信息3 删除电影类型信息4 显⽰所有电影类型信息0 退出系统=============================&quot;&quot;&quot;# 1.录⼊电影类型信息def option1():    tid=input(&quot;请输⼊编号：&quot;)    res=mtdal.showformtid(tid)    if not res:        tname=input(&quot;请输⼊名称：&quot;)        tcontent=input(&quot;请输⼊内容：&quot;)        mt=MovieType(tid,tname,tcontent)        res= mtdal.insert(mt)        if res&gt;0:            print(&quot;录入成功&quot;)        else:            print(&quot;录入失败&quot;)    else:        print(&quot;编号已存在！&quot;)    input(&quot;\\n按下回车键返回主菜单..&quot;)        # 2.修改电影类型信息def option2():    tid=input(&quot;请输入修改编号：&quot;)    print(&quot;\\n编号 名称 内容 创建⽇期&quot;)    res=mtdal.showformtid(tid)    if not res:        print(&quot;此电影类型不存在！&quot;)        input(&quot;\\n按下回车键返回主菜单..&quot;)        return    print(res[0],res[1],res[2],datetime.datetime.strftime(res[3],&quot;%Y年%m月%d日\\n&quot;))    tname=input(&quot;请输入修改名称（若不修改则直接回车）：&quot;)    tcontent=input(&quot;请输⼊修改内容（若不修改则直接回车）：&quot;)    mt=MovieType(tid,tname,tcontent)    res=mtdal.update(mt)    print(f&quot;&#123;res[0]&#125;个名称被修改，&#123;res[1]&#125;个内容被修改&quot;)    input(&quot;\\n按下回车键返回主菜单..&quot;)# 3.删除电影类型信息def option3():    tid=input(&quot;请输入删除编号：&quot;)    res1=mtdal.showformtid(tid)    if not res1:        print(&quot;此电影类型不存在！&quot;)        input(&quot;\\n按下回车键返回主菜单..&quot;)        return        print(&quot;\\n编号 名称 内容 创建⽇期&quot;)    print(res1[0],res1[1],res1[2],datetime.datetime.strftime(res1[3],&quot;%Y年%m月%d日\\n&quot;))    esc=input(&quot;确认要删除吗? y/n:&quot;)    if esc.lower() == &#x27;y&#x27; or esc.lower() == &#x27;yes&#x27;:        res2=mtdal.delet(tid)        if res2&gt;0 :            print(&quot;删除成功&quot;)        else:            print(&quot;删除失败&quot;)    input(&quot;\\n按下回车键返回主菜单..&quot;)# 4.显示所有电影类型信息def option4():    print(&quot;\\n编号 名称 内容 创建⽇期&quot;)    res=mtdal.showall()    for i in res:        print(i[0],i[1],i[2],datetime.datetime.strftime(i[3],&quot;%Y年%m月%d日&quot;))    input(&quot;\\n按下回车键返回主菜单..&quot;)# 0.退出系统def option0():    esc=input(&quot;请问是否退出? y/n:&quot;)    if esc.lower() == &#x27;y&#x27; or esc.lower() == &#x27;yes&#x27;:        print(&quot;已成功退出&quot;)        exit()    else:        input(&quot;\\n按下回车键返回主菜单..&quot;)if __name__==&quot;__main__&quot;:    while True:        print(menu)        option=input(&quot;请输⼊操作选项：&quot;)        if option==&quot;1&quot;:            option1()        elif option==&quot;2&quot;:            option2()        elif option==&quot;3&quot;:            option3()        elif option==&quot;4&quot;:            option4()        elif option==&quot;0&quot;:            option0()        else:            print(&quot;无效操作，请重新输入！&quot;)            input(&quot;按下回车键继续..&quot;)        "},{"url":"/2025/06/07/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5Python/6.5%E6%80%BB%E7%BB%93%EF%BC%9Ahtml%E8%AF%AD%E8%A8%80%E3%80%81%E5%89%8D%E5%90%8E%E7%AB%AF%E7%BB%93%E5%90%88%20app.py/","content":"&lt;html&gt;&lt;/html&gt;  #根标签&lt;head&gt;&lt;/head&gt;  #头标签&lt;title&gt;&lt;/title&gt;  #头标题标签，在&lt;head&gt;标签⾥设置&lt;meta charset=&quot;utf-8&quot;&gt;  #常⽤于指定⻚⾯编码，在&lt;head&gt;标签内&lt;body&gt;&lt;/body&gt;  #⻚⾯的内容基本上写在此标签内&lt;h1&gt;&lt;/h1&gt; h1...h6  #标题标签&lt;p&gt;&lt;/p&gt;  #段落标签&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;  #超级链接标签&lt;table&gt;&lt;tr&gt;&lt;td&gt;学号&lt;/td&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;  #表格标签表单标签：&lt;form action=&quot;&quot;method=&quot;post&quot;&gt;表单元素控件&lt;/form&gt;  #表单标签#表单元素控件  &lt;input&gt; 文本显示: &lt;input type=&quot;text&quot; name=&quot;tname&quot; value=&quot;动漫&quot; readonly&gt;类型: number(step 0.1) date password提示功能: &lt;input type=&quot;text&quot;placeholder=&quot;请输入电影名称&quot;&gt;# 下拉框标签  &lt;select&gt;&lt;/select&gt;&lt;select name=&quot;tid&quot;&gt;&lt;option value=&quot;1&quot;&gt;喜剧&lt;/option&gt;&lt;option value=&quot;2&quot; selected&gt;动画&lt;/option&gt;&lt;/select&gt;# 图片标签&lt;img src=&quot;static/p11.png&quot; width=&quot;300&quot;&gt;# 样式标签 style&lt;style&gt; \tbody&#123; margin: 0 auto; width: 800px; \t\tbackground-image:url(&quot;static/bg.jpg&quot;);\t\tbackground-repeat:no-repeat;\t\tbackground-size: cover;\t&#125;\th1&#123; color: #258dcd&#125;\ta&#123; \t\tbackground-color: #258dcd; \t\tcolor: white; \t\tpadding: 5px 8px;\t\ttext-decoration: none;\t\tborder-radius: 5px;\t\t/*半透明*/\t\t/*background-color:rgba(55,55,55,0.5)*/\t&#125;\ttable,tr,td&#123; border: 2px solid black; border-collapse: collapse;&#125;\ttable&#123; width: 100% &#125;\ttd&#123; text-align: center; padding: 10px;&#125;\t.tou&#123; \t\tbackground-color: #258dcd; \t\tcolor: white; \t\tfont-size: 18px; \t\tfont-weight: bold;\t&#125;&lt;/style&gt;\n\n\n作业练习1.制作列表⻚： list.html\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;豆瓣网列表页&lt;/title&gt;    &lt;style&gt;        /* 全局样式设置 */        body &#123;            /* 设置页面字体 */            font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;            /* 背景图片路径 */            /* background-image: url(&quot;static/pbg1.jpg&quot;); */            background-size: cover;            /* 背景图片覆盖整个页面 */            background-position: center;            /* 背景图片居中显示 */            display: flex;            /* 使用 Flexbox 布局 */            flex-direction: column;            /* 垂直排列子元素 */            align-items: center;            /* 水平居中对齐子元素 */            justify-content: flex-start;            /* 垂直顶部对齐子元素 */            min-height: 100vh;            /* 最小高度为视口高度 */            margin: 0;            /* 清除默认边距 */            padding: 20px;            /* 添加内边距 */            box-sizing: border-box;            /* 盒模型包含内边距和边框 */        &#125;        h1 &#123;            /* 标题颜色 - 蓝色 */            color: #238ccd;            /* 添加文字阴影 */            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);            /* 底部外边距 */            margin-bottom: 20px;        &#125;        /* 导航链接容器样式 */        .nav-links &#123;            /* 使用 Flexbox 布局 */            display: flex;            /* 水平居中对齐链接 */            justify-content: center;            /* 链接之间的间距 */            gap: 15px;            /* 底部外边距 */            margin-bottom: 30px;            /* 小屏幕下自动换行 */            flex-wrap: wrap;        &#125;        /* 导航链接样式 */        .nav-links a &#123;            /* 背景色 - 蓝色 */            background-color: #238ccd;            /* 文字颜色 - 白色 */            color: white;            /* 去除下划线 */            text-decoration: none;            border-radius: 20px;            /* 圆角边框 */            padding: 10px 20px;            /* 内边距 */            transition: background-color 0.3s ease;            /* 背景色过渡动画 */        &#125;        /* 悬停时背景色变深 */        /* 导航链接悬停效果 */        .nav-links a:hover &#123;            background-color: #1a6fa3;        &#125;        /* 列表容器样式 */        .movie-list &#123;            /* 半透明白色背景 */            background-color: rgba(255, 255, 255, 0.9);            /* 内边距 */            padding: 20px;            /* 圆角边框 */            border-radius: 10px;            /* 添加阴影效果 */            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);            /* 宽度为父容器的100% */            width: 100%;            /* 最大宽度限制 */            max-width: 800px;            /* 盒模型包含内边距和边框 */            box-sizing: border-box;        &#125;        /* 表格样式优化 */        table &#123;            /* 宽度为父容器的100% */            width: 100%;            /* 合并边框 */            border-collapse: collapse;        &#125;        th,        td &#123;            /* 单元格内边距 */            padding: 12px;            /* 文本居中对齐 */            text-align: center;            /* 底部边框 */            border-bottom: 1px solid #ddd;        &#125;        th &#123;            /* 表头背景色 - 蓝色 */            background-color: #238ccd;            /* 表头文字颜色 - 白色 */            color: white;            /* 表头文字粗细 */            font-weight: 600;        &#125;        /* 行悬停时背景色变浅 */        tr:hover &#123;            background-color: #f5f5f5;        &#125;        /* 操作按钮样式 */        .action-btn &#123;            /* 行内块元素 */            display: inline-block;            /* 背景色 - 蓝色 */            background-color: #238ccd;            /* 文字颜色 - 白色 */            color: white;            /* 去除下划线 */            text-decoration: none;            /* 圆角边框 */            border-radius: 5px;            /* 内边距 */            padding: 5px 10px;            /* 外边距 */            margin: 0 3px;            /* 背景色过渡动画 */            transition: background-color 0.3s ease;        &#125;        /* 悬停时背景色变深 */        .action-btn:hover &#123;            background-color: #1a6fa3;        &#125;        /* 响应式设计 - 小屏幕设备 */        @media (max-width: 600px) &#123;            .nav-links &#123;                /* 缩小链接间距 */                gap: 10px;            &#125;            .nav-links a &#123;                /* 减小链接内边距 */                padding: 8px 15px;                /* 减小链接文字大小 */                font-size: 14px;            &#125;            th,            td &#123;                /* 减小单元格内边距 */                padding: 8px;                /* 减小文字大小 */                font-size: 14px;            &#125;            .action-btn &#123;                /* 减小按钮内边距 */                padding: 3px 8px;                /* 减小按钮文字大小 */                font-size: 12px;            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 页面标题 --&gt;    &lt;h1&gt;欢迎使用豆瓣网&lt;/h1&gt;    &lt;!-- 导航链接区域 --&gt;    &lt;div class=&quot;nav-links&quot;&gt;        &lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;        &lt;a href=&quot;/list&quot;&gt;电影类型列表&lt;/a&gt;        &lt;a href=&quot;/add&quot;&gt;添加电影类型&lt;/a&gt;        &lt;a href=&quot;/addMovie&quot;&gt;添加电影&lt;/a&gt;        &lt;a href=&quot;/zhu&quot; target=&quot;_blank&quot;&gt;查看柱状图&lt;/a&gt;        &lt;a href=&quot;bing&quot; target=&quot;_blank&quot;&gt;查看饼状图&lt;/a&gt;    &lt;/div&gt;    &lt;!-- 电影列表容器 --&gt;    &lt;div class=&quot;movie-list&quot;&gt;        &lt;table&gt;            &lt;tr&gt;                &lt;th&gt;编号&lt;/th&gt;                &lt;th&gt;名称&lt;/th&gt;                &lt;th&gt;内容&lt;/th&gt;                &lt;th&gt;创建日期&lt;/th&gt;                &lt;th&gt;操作&lt;/th&gt;            &lt;/tr&gt;            &#123;% for i in info %&#125;            &lt;tr&gt;                &lt;td&gt;&#123;&#123;i[0]&#125;&#125;&lt;/td&gt;                &lt;td&gt;&#123;&#123;i[1]&#125;&#125;&lt;/td&gt;                &lt;td&gt;&#123;&#123;i[2]&#125;&#125;&lt;/td&gt;                &lt;td&gt;&#123;&#123;i[4]&#125;&#125;&lt;/td&gt;                &lt;td&gt;                    &lt;a href=&quot;/update/&#123;&#123;i[0]&#125;&#125;&quot; class=&quot;action-btn&quot;&gt;修改&lt;/a&gt;                    &lt;a href=&quot;/delete/&#123;&#123;i[0]&#125;&#125;&quot; class=&quot;action-btn&quot;&gt;删除&lt;/a&gt;                    &lt;a href=&quot;&quot; class=&quot;action-btn&quot;&gt;查看&lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;            &#123;% endfor %&#125;        &lt;/table&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n\n2.制作添加⻚： add.html\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;豆瓣网添加页&lt;/title&gt;    &lt;style&gt;        /* 全局样式设置 */        body &#123;            /* 设置页面字体 */            font-family: &#x27;Segoe UI&#x27;, Tahoma, Geneva, Verdana, sans-serif;            /* 背景图片路径 */            /* background-image: url(&quot;static/pbg1.jpg&quot;); */            /* 背景图片覆盖整个页面 */            background-size: cover;            /* 背景图片居中显示 */            background-position: center;            /* 使用 Flexbox 布局 */            display: flex;            /* 垂直排列子元素 */            flex-direction: column;            /* 水平居中对齐子元素 */            align-items: center;            /* 垂直顶部对齐子元素 */            justify-content: flex-start;            /* 最小高度为视口高度 */            min-height: 100vh;            /* 清除默认边距 */            margin: 0;            /* 添加内边距 */            padding: 20px;            /* 盒模型包含内边距和边框 */            box-sizing: border-box;        &#125;        /* 页面标题样式 */        h1 &#123;            /* 标题颜色 - 蓝色 */            color: #238ccd;            /* 添加文字阴影 */            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);            /* 底部外边距 */            margin-bottom: 20px;        &#125;        /* 导航链接容器样式 */        .nav-links &#123;            /* 使用 Flexbox 布局 */            display: flex;            /* 水平居中对齐链接 */            justify-content: center;            /* 链接之间的间距 */            gap: 15px;            /* 底部外边距 */            margin-bottom: 30px;        &#125;        /* 导航链接样式 */        .nav-links a &#123;            /* 背景色 - 蓝色 */            background-color: #238ccd;            /* 文字颜色 - 白色 */            color: white;            /* 去除下划线 */            text-decoration: none;            /* 圆角边框 */            border-radius: 20px;            /* 内边距 */            padding: 10px 20px;            /* 背景色过渡动画 */            transition: background-color 0.3s ease;        &#125;        /* 导航链接悬停效果 */        .nav-links a:hover &#123;            /* 悬停时背景色变深 */            background-color: #1a6fa3;        &#125;        /* 图片样式 */        img &#123;            /* 图片宽度 */            width: 500px;            /* 最大宽度为父容器的90% */            max-width: 90%;            /* 圆角边框 */            border-radius: 10px;            /* 添加阴影效果 */            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);            /* 底部外边距 */            margin-bottom: 30px;        &#125;        /* 表单容器样式 */        form &#123;            /* 半透明白色背景 */            background-color: rgba(255, 255, 255, 0.9);            /* 内边距 */            padding: 30px;            /* 圆角边框 */            border-radius: 10px;            /* 添加阴影效果 */            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);            /* 宽度为父容器的100% */            width: 100%;            /* 最大宽度 */            max-width: 400px;        &#125;        /* 表单内段落样式 */        form p &#123;            /* 使用 Flexbox 布局 */            display: flex;            /* 垂直排列子元素 */            flex-direction: column;            /* 底部外边距 */            margin-bottom: 20px;        &#125;        /* 表单标签样式 */        form label &#123;            /* 底部外边距 */            margin-bottom: 5px;            /* 字体粗细 */            font-weight: 600;            /* 文字颜色 */            color: #333;        &#125;        /* 文本输入框样式 */        form input[type=&quot;text&quot;] &#123;            /* 内边距 */            padding: 10px;            /* 边框样式 */            border: 1px solid #ccc;            /* 圆角边框 */            border-radius: 5px;            /* 字体大小 */            font-size: 16px;        &#125;        /* 提交按钮样式 */        form input[type=&quot;submit&quot;] &#123;            /* 背景色 - 蓝色 */            background-color: #238ccd;            /* 文字颜色 - 白色 */            color: white;            /* 内边距 */            padding: 12px 20px;            /* 无边框 */            border: none;            /* 圆角边框 */            border-radius: 5px;            /* 鼠标指针样式 */            cursor: pointer;            /* 字体大小 */            font-size: 16px;            /* 背景色过渡动画 */            transition: background-color 0.3s ease;        &#125;        /* 提交按钮悬停效果 */        form input[type=&quot;submit&quot;]:hover &#123;            /* 悬停时背景色变深 */            background-color: #1a6fa3;        &#125;        /* 响应式设计 - 小屏幕设备 */        @media (max-width: 600px) &#123;            body &#123;                /* 添加内边距防止内容溢出 */                padding: 20px;            &#125;            .nav-links &#123;                /* 链接换行显示 */                flex-wrap: wrap;            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 页面标题 --&gt;    &lt;h1&gt;欢迎使用豆瓣网&lt;/h1&gt;    &lt;!-- 导航链接区域 --&gt;    &lt;div class=&quot;nav-links&quot;&gt;        &lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;        &lt;a href=&quot;/list&quot;&gt;电影类型列表&lt;/a&gt;        &lt;a href=&quot;/add&quot;&gt;添加电影类型&lt;/a&gt;        &lt;a href=&quot;/addMovie&quot;&gt;添加电影&lt;/a&gt;        &lt;a href=&quot;/zhu&quot; target=&quot;_blank&quot;&gt;查看柱状图&lt;/a&gt;        &lt;a href=&quot;bing&quot; target=&quot;_blank&quot;&gt;查看饼状图&lt;/a&gt;    &lt;/div&gt;    &lt;!-- 装饰图片 --&gt;    &lt;img src=&quot;static/py11.png&quot; alt=&quot;&quot;&gt;    &lt;!-- 添加电影类型表单 --&gt;    &lt;form action=&quot;/addSubmit&quot; method=&quot;post&quot;&gt;        &lt;p&gt;            &lt;label for=&quot;id&quot;&gt;编号：&lt;/label&gt;            &lt;input type=&quot;text&quot; name=&quot;tid&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            &lt;label for=&quot;name&quot;&gt;名称：&lt;/label&gt;            &lt;input type=&quot;text&quot; name=&quot;tname&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            &lt;label for=&quot;content&quot;&gt;内容：&lt;/label&gt;            &lt;input type=&quot;text&quot; name=&quot;tcontent&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            &lt;input type=&quot;submit&quot; value=&quot;添加&quot;&gt;        &lt;/p&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\n\n使⽤ python+flask+mysql+html 三层架构开发⾖瓣⽹电影类型列表页面![[Pasted image 20250605192834.png]]\n添加电影类型页面![[Pasted image 20250605193232.png]]\n添加成功![[Pasted image 20250605193255.png]]![[Pasted image 20250605193305.png]]\n修改页面![[Pasted image 20250605193426.png]]\n修改成功（测试仅修改内容，不修改名称）![[Pasted image 20250605193519.png]]![[Pasted image 20250605193533.png]]\n删除操作（测试删除 3 功夫）![[Pasted image 20250605193645.png]]![[Pasted image 20250605193656.png]]\n"},{"url":"/2025/06/07/%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5Python/6.6%E6%80%BB%E7%BB%93%EF%BC%9A%E7%94%B5%E5%BD%B1%E8%A1%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%81%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2/","content":"查看不同电影类型的电影列表![[Pasted image 20250606215523.png]]![[Pasted image 20250606215547.png]]\n实现电影的添加![[Pasted image 20250606215717.png]]![[Pasted image 20250606215732.png]]![[Pasted image 20250606215752.png]]\n实现电影的修改![[Pasted image 20250606215903.png]]![[Pasted image 20250606215925.png]]![[Pasted image 20250606215942.png]]\n删除![[Pasted image 20250606220057.png]]![[Pasted image 20250606220115.png]]![[Pasted image 20250606220127.png]]\n电影类型列表⻚添加模糊搜索电影功能![[Pasted image 20250606220151.png]]![[Pasted image 20250606220214.png]]\n"}]